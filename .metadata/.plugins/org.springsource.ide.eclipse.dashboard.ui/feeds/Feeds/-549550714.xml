<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2016-02-16T15:04:41Z</updated>
  <entry>
    <title>Spring AMQP 1.6.0 Milestone 1 (and 1.5.4) Available</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/16/spring-amqp-1-6-0-milestone-1-and-1-5-4-available" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Gary Russell</name>
    </author>
    <id>tag:spring.io,2016-02-12:2381</id>
    <updated>2016-02-16T15:04:41Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce the availability of the first milestone of the 1.6 version of Spring AMQP.&lt;/p&gt;
&lt;p&gt;Some highlights of this release:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
  &lt;p&gt;A new jar &lt;code&gt;spring-rabbit-test&lt;/code&gt; containing a test harness to help with testing &lt;code&gt;@RabbitListener&lt;/code&gt; methods; see &lt;a href="http://docs.spring.io/spring-amqp/docs/1.6.0.M1/reference/html/_reference.html#testing"&gt;the testing chapter&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;Multiple &lt;code&gt;@RabbitListener&lt;/code&gt; annotations on a method (when using Java 8) and the &lt;code&gt;@RabbitListeners&lt;/code&gt; annotation (for pre-Java 8), each allowing the same method to be the listener method for multiple listener containers.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;Full support for the &lt;a href="https://www.rabbitmq.com/blog/2015/04/16/scheduling-messages-with-rabbitmq/"&gt;Delayed Message Exchange&lt;/a&gt; RabbitMQ plugin.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;An &lt;code&gt;AsyncRabbitTemplate&lt;/code&gt; returning &lt;code&gt;ListenableFuture&amp;lt;?&amp;gt;&lt;/code&gt; for request/reply messaging.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;An option to publish &lt;code&gt;ApplicationEvents&lt;/code&gt; when listener containers go idle.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a complete list of new features, see the &lt;a href="http://docs.spring.io/spring-amqp/docs/1.6.0.M1/reference/html/_introduction.html#_changes_in_1_6_since_1_5"&gt;What&amp;rsquo;s new?&lt;/a&gt; as well as the &lt;a href="https://jira.spring.io/jira/secure/ReleaseNote.jspa?projectId=10450&amp;version=15297"&gt;JIRA Release Notes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Visit the &lt;a href="http://projects.spring.io/spring-amqp/"&gt;project page&lt;/a&gt; for links to downloads, documentation etc. &lt;/p&gt;
&lt;p&gt;In addition, the 1.5.4.RELEASE is available with a few &lt;a href="https://jira.spring.io/jira/secure/ReleaseNote.jspa?projectId=10450&amp;version=15454"&gt;minor bug fixes&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring REST Docs 1.1.0.M1</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/16/spring-rest-docs-1-1-0-m1" />
    <category term="releases" label="Releases" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2016-02-16:2382</id>
    <updated>2016-02-16T12:18:04Z</updated>
    <content type="html">&lt;p&gt;It&amp;rsquo;s my pleasure to announce that the first milestone of Spring REST Docs 1.1 has been released. 1.1.0.M1 is available from &lt;a href="https://repo.spring.io/milestone/"&gt;https://repo.spring.io/milestone/&lt;/a&gt;.&lt;/p&gt;&lt;h1&gt;&lt;a href="#what-rsquo-s-new" class="anchor" name="what-rsquo-s-new"&gt;&lt;/a&gt;What&amp;rsquo;s new?&lt;/h1&gt;&lt;h2&gt;&lt;a href="#rest-assured" class="anchor" name="rest-assured"&gt;&lt;/a&gt;REST Assured&lt;/h2&gt;
&lt;p&gt;As an alternative to the lightweight server-less documentation generation offered by Spring Framework&amp;rsquo;s &lt;code&gt;MockMvc&lt;/code&gt;, you can now use &lt;a href="http://rest-assured.io"&gt;REST Assured&lt;/a&gt; to test and document your RESTful services. This opens up Spring REST Docs to all four corners of the JVM and beyond, allowing you to document anything that you can access via HTTP.&lt;/p&gt;&lt;h2&gt;&lt;a href="#markdown" class="anchor" name="markdown"&gt;&lt;/a&gt;Markdown&lt;/h2&gt;
&lt;p&gt;Support has been added for generating Markdown snippets. On its own, Markdown isn&amp;rsquo;t as capable as Asciidoctor, but can work very well when combined with existing documentation toolchains such as &lt;a href="https://github.com/tripit/slate"&gt;Slate&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#testng" class="anchor" name="testng"&gt;&lt;/a&gt;TestNG&lt;/h2&gt;
&lt;p&gt;In addition to the existing support for using JUnit, you can now use Spring REST Docs with &lt;a href="http://testng.org"&gt;TestNG&lt;/a&gt;.&lt;/p&gt;&lt;h1&gt;&lt;a href="#what-rsquo-s-next" class="anchor" name="what-rsquo-s-next"&gt;&lt;/a&gt;What&amp;rsquo;s next?&lt;/h1&gt;
&lt;p&gt;We&amp;rsquo;re hoping to publish a release candidate in around two months&amp;rsquo; time with a release to follow shortly after that. Please refer to the &lt;a href="https://github.com/spring-projects/spring-restdocs/issues"&gt;issue tracker&lt;/a&gt; for details of what&amp;rsquo;s planned and to add any enhancement ideas of your own.&lt;/p&gt;
&lt;p&gt;Thank you for the feedback and suggestions that have shaped 1.1.0 thus far. Please try out the first milestone and let us know what you think.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Reactor 2.5 : A Second Generation Reactive Foundation for the JVM</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/16/reactor-2-5-a-second-generation-reactive-foundation-for-the-jvm" />
    <category term="releases" label="Releases" />
    <author>
      <name>Stephane Maldini</name>
    </author>
    <id>tag:spring.io,2015-11-29:2312</id>
    <updated>2016-02-16T11:59:00Z</updated>
    <content type="html">&lt;h2&gt;&lt;a href="#entering-reactive-streams-era" class="anchor" name="entering-reactive-streams-era"&gt;&lt;/a&gt;Entering Reactive Streams Era&lt;/h2&gt;
&lt;p&gt;Reactor 2.0 development started by the end of 2014, around the same time as &lt;a href="http://reactive-streams.org"&gt;Reactive Streams&lt;/a&gt;. We were keen on joining the effort and early adopt a &lt;a href="https://github.com/reactive-streams/reactive-streams-jvm"&gt;backpressure protocol&lt;/a&gt; to mitigate our main message-passing limitation: &lt;em&gt;bounded capacity&lt;/em&gt;. We delivered in Reactor 2.0 the first attempt to make Reactive Streams implementations of &lt;a href="https://en.wikipedia.org/wiki/Circular_buffer"&gt;RingBuffer-based&lt;/a&gt; schedulers and derived an increasingly popular reactive pattern: &lt;a href="https://msdn.microsoft.com/en-gb/data/gg577609.aspx"&gt;Reactive Extensions&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Meanwhile, Reactive Streams started getting traction and an entire ecosystem of libraries discussed this transition. The regular concern ? Implementing Reactive Streams semantics is all but an easy task. We observed an increasing need for a reactive foundation to solve message-passing and implement common streaming operators. We therefore created a dedicated project space for Reactor Core and started a focused effort &lt;a href="https://spring.io/blog/2016/02/09/reactive-spring"&gt;with Spring Framework team&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Starting from 2.5, Reactor is now &lt;a href="https://github.com/reactor/reactor/blob/master/README.md"&gt;organized into multiple projects&lt;/a&gt;, maintenance branches such as &lt;a href="https://github.com/reactor/reactor/tree/2.0.x"&gt;2.0.x&lt;/a&gt; are left unaltered. This is reflected in release management, for instance &lt;a href="https://github.com/reactor/reactor-core"&gt;Reactor Core 2.5 M1&lt;/a&gt; is the only milestone available and other projects will follow with their exclusive versioning. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://projectreactor.io/docs"&gt;&lt;img src="https://raw.githubusercontent.com/reactor/projectreactor.io/4f70afd5091502565cb8540a7c8195195f3e8801/src/main/static/assets/img/modules.png" /&gt;&lt;/a&gt;&lt;br/&gt;To support this new project model, we deployed a new and hopefully more welcoming site on &lt;a href="http://projectreactor.io"&gt;http://projectreactor.io&lt;/a&gt;. &lt;/p&gt;&lt;h2&gt;&lt;a href="#a-collaborative-new-take-on-reactive-streams" class="anchor" name="a-collaborative-new-take-on-reactive-streams"&gt;&lt;/a&gt;A collaborative new take on Reactive Streams&lt;/h2&gt;
&lt;p&gt;This new organization unlocked a far cheaper ticket price to get involved with the project activities. The project benefits from Spring API design collaboration and direct contributions notably from &lt;a href="http://twitter.com/sdeleuze"&gt;SÃ©bastien Deleuze&lt;/a&gt; and &lt;a href="http://twitter.com/brianclozel"&gt;Brian Clozel&lt;/a&gt;.&lt;br/&gt;Reactor also welcomes the help of new external contributors and reviewers :&lt;br/&gt;- &lt;a href="http://twitter.com/ifesdjeen"&gt;Alex Petrov&lt;/a&gt; re-inventing the popular Reactor &lt;a href="http://github.com/reactor/reactor-addons"&gt;event routing&lt;/a&gt; features.&lt;br/&gt;- &lt;a href="http://twitter.com/akadyshev"&gt;Anatoly Kadsyshev&lt;/a&gt; who works on the amazingly efficient &lt;a href="https://gitter.im/real-logic/Aeron"&gt;Aeron&lt;/a&gt; Reactive Streams bridge for &lt;a href="http://github.com/reactor/reactor-io"&gt;Reactor IO&lt;/a&gt;.&lt;br/&gt;- &lt;a href="http://twitter.com/nebhale"&gt;Ben Hale&lt;/a&gt; and his team working on the new &lt;a href="https://github.com/cloudfoundry/cf-java-client"&gt;Reactive Cloud Foundry Client API&lt;/a&gt;. More than early adopting Reactor 2.5 Core and Stream, Ben keeps iterating with us on his real-world use cases.&lt;br/&gt;- &lt;a href="http://twitter.com/oodamien"&gt;Damien Vitrac&lt;/a&gt; contributing the new &lt;a href="http://projectreactor.io"&gt;project site&lt;/a&gt; style and preparing the Reactor Console user experience.&lt;br/&gt;- &lt;a href="http://twitter.com/akarnokd"&gt;DÃ¡vid Karnok&lt;/a&gt;, researcher, main active &lt;a href="https://github.com/ReactiveX/RxJava"&gt;RxJava committer&lt;/a&gt; and author of the excellent &lt;a href="http://akarnokd.blogspot.com"&gt;Advanced RxJava blog&lt;/a&gt;, strongly influenced our internal operational model. Our shared passion for efficiency and reactive patterns led us to create a research space, Reactive Streams Commons. &lt;/p&gt;
&lt;a href="http://raw.githubusercontent.com/reactor/projectreactor.io/9b16855da55e82cff4186fc088f900a284c015d8/src/main/static/assets/img/org3.png"&gt;&#xD;
&lt;table class="image"&gt;&#xD;
&lt;caption align="bottom"&gt;Dependencies and Collaborations at play with Reactor 2.5&lt;/caption&gt;&#xD;
&lt;tr&gt;&lt;td&gt;&lt;img src="http://raw.githubusercontent.com/reactor/projectreactor.io/9b16855da55e82cff4186fc088f900a284c015d8/src/main/static/assets/img/org3.png" alt="Reactor 2.5" /&gt;&lt;/td&gt;&lt;/tr&gt;&#xD;
&lt;/table&gt;&#xD;
&lt;/a&gt;&lt;h3&gt;&lt;a href="#reactive-streams-commons" class="anchor" name="reactive-streams-commons"&gt;&lt;/a&gt;Reactive Streams Commons&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/reactor/reactive-streams-commons"&gt;The Reactive Streams Commons repository&lt;/a&gt; is an open research effort focusing on efficiency with &lt;a href="http://reactivex.io"&gt;Reactive Extensions&lt;/a&gt; and more, for the &lt;a href="http://reactive-streams.org"&gt;Reactive Streams specification&lt;/a&gt;. It is fully inlined by Reactor Core and Stream which operate as contract gates for the many revolutions the effort focuses on. &lt;/p&gt;
&lt;p&gt;&amp;ldquo;RSC&amp;rdquo; is therefore a freeform project similar to the &lt;a href="https://github.com/JCTools/JCTools"&gt;JCTools&lt;/a&gt; take on concurrent queues. One of its biggest progress is a form of &amp;ldquo;Fusion&amp;rdquo; protocol to reduce overhead of most synchronous and some asynchronous stages in a reactive processing chain.&lt;br/&gt;Finally, the effort helped fixing more than a hundred of streaming bugs and our testing process now involves RSC unit/integration testing and &lt;a href="https://github.com/reactor/reactive-streams-commons/tree/master/src/jmh/"&gt;JMH benchmarks&lt;/a&gt; combined with Reactor own integration testing and &lt;a href="https://github.com/reactor/reactor-benchmarks"&gt;benchmarks&lt;/a&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#reactor-core-2-5-0-m1" class="anchor" name="reactor-core-2-5-0-m1"&gt;&lt;/a&gt;Reactor Core 2.5.0.M1&lt;/h2&gt;
&lt;p&gt;Today&amp;rsquo;s Reactor blog series starts with a joyful event, Reactor Core 2.5.0.M1 release !&lt;br/&gt;Under its new scope and close ties with Reactive Streams Commons, Reactor Core offers just enough Rx coverage to build reactive apps or libraries alike , e.g. &lt;a href="https://github.com/spring-projects/spring-reactive"&gt;Spring Reactive Web support&lt;/a&gt;. For the impatient reader, have a look at the already &lt;a href="https://github.com/reactor/lite-rx-api-hands-on"&gt;available quickstart on github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A quick glance at a &lt;em&gt;scatter-gather&lt;/em&gt; scenario:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;Mono.from(userRequestPublisher)&#xD;
    .then(userRepository::findUserProfile, &#xD;
          userRepository::findUserPaymentMethod)&#xD;
    .log(&amp;quot;user.requests&amp;quot;)&#xD;
    .or(Mono.delay(5)&#xD;
            .then(n -&amp;gt; Mono.error(new TimeoutException()))&#xD;
    .mergeWith(userRepository::findSimilarUserDetails)&#xD;
    .map(userDetailsTuple -&amp;gt; userDetailsTuple.t1.username)&#xD;
    .publishOn(SchedulerGroup.io())&#xD;
    .subscribe(responseSubscriber);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In details :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://projectreactor.io/core/docs/api/reactor/core/publisher/Flux.html"&gt;Flux&lt;/a&gt;, a &lt;a href="http://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/org/reactivestreams/Publisher.html?is-external=true"&gt;Publisher&lt;/a&gt; of &lt;strong&gt;0 to N&lt;/strong&gt; data signals with a lite Rx scope. Operators include &lt;code&gt;create()&lt;/code&gt;, &lt;code&gt;interval()&lt;/code&gt;, &lt;code&gt;merge()&lt;/code&gt;, &lt;code&gt;zip()&lt;/code&gt;, &lt;code&gt;concat()&lt;/code&gt;, &lt;code&gt;switchOnError()&lt;/code&gt; and &lt;code&gt;switchOnEmpty()&lt;/code&gt;&lt;br/&gt;&lt;img src="https://raw.githubusercontent.com/reactor/projectreactor.io/master/src/main/static/assets/img/marble/flatmap.png" alt="Flux in action" /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://projectreactor.io/core/docs/api/reactor/core/publisher/Mono.html"&gt;Mono&lt;/a&gt;, a &lt;a href="http://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/org/reactivestreams/Publisher.html?is-external=true"&gt;Publisher&lt;/a&gt; of &lt;strong&gt;0 or 1&lt;/strong&gt; data signal with a lite Rx derived scope adapted to strongly type this specific volume nature. Operators include &lt;code&gt;delay()&lt;/code&gt;, &lt;code&gt;then()&lt;/code&gt;, &lt;code&gt;any()&lt;/code&gt;, &lt;code&gt;and()&lt;/code&gt;, &lt;code&gt;or()&lt;/code&gt;, &lt;code&gt;otherwise()&lt;/code&gt;, &lt;code&gt;otherwiseIfEmpty()&lt;/code&gt;, &lt;code&gt;where()&lt;/code&gt; and a blocking &lt;code&gt;get()&lt;/code&gt;.&lt;br/&gt;&lt;img src="https://raw.githubusercontent.com/reactor/projectreactor.io/master/src/main/static/assets/img/marble/then.png" alt="Mono in action" /&gt;&lt;/li&gt;
  &lt;li&gt;New simple scheduling contract based on plain Java interfaces (Runnable, Callable).&lt;br/&gt;&amp;ndash; Featuring &lt;a href="http://projectreactor.io/core/docs/api/reactor/core/publisher/SchedulerGroup.html"&gt;SchedulerGroup&lt;/a&gt;, &lt;a href="http://projectreactor.io/core/docs/api/reactor/core/publisher/TopicProcessor.html"&gt;TopicProcessor&lt;/a&gt; and &lt;a href="http://projectreactor.io/core/docs/api/reactor/core/publisher/WorkQueueProcessor.html"&gt;WorkQueueProcessor&lt;/a&gt;.&lt;br/&gt;&amp;ndash; Superseed the former &lt;code&gt;Enviroment&lt;/code&gt;/&lt;code&gt;Dispatcher&lt;/code&gt; couple while answering the same needs and a simple migration path will shortly be documented. No more static state holding references of dispatchers.&lt;br/&gt;&amp;ndash; Linked operators : &lt;code&gt;publishOn()&lt;/code&gt; and &lt;code&gt;dispatchOn()&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Test support for &lt;code&gt;Publisher&lt;/code&gt; sources with &lt;a href="http://projectreactor.io/core/docs/api/reactor/core/test/TestSubscriber.html"&gt;TestSubscriber&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Convert &lt;code&gt;Callable&lt;/code&gt;, &lt;code&gt;Runnable&lt;/code&gt;, &lt;code&gt;Iterable&lt;/code&gt;, Java 8 &lt;code&gt;CompletableFuture&lt;/code&gt;, Java 9 &lt;code&gt;Flow.Publisher&lt;/code&gt;, RxJava 1 &lt;code&gt;Observable&lt;/code&gt; and &lt;code&gt;Single&lt;/code&gt; to Reactive Streams ready &lt;code&gt;Flux&lt;/code&gt; and &lt;code&gt;Mono&lt;/code&gt;, no extra bridge dependency required.&lt;/li&gt;
  &lt;li&gt;Fully revamped and integrated &lt;a href="http://projectreactor.io/core/docs/api/"&gt;Javadoc&lt;/a&gt;, including slightly adjusted marble diagrams.&lt;/li&gt;
  &lt;li&gt;A micro toolkit of utils and base &lt;a href="http://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/org/reactivestreams/Subscriber.html?is-external=true"&gt;Subscriber&lt;/a&gt; to reuse at will to implement your own Reactive components.&lt;br/&gt;&amp;ndash; A cost-efficient Timer API and implementation (hash-wheel timer).&lt;br/&gt;&amp;ndash; New Fusion API to virtually conflate 2 or more stages from a reactive chain&lt;br/&gt;&amp;ndash; An adapted &lt;code&gt;QueueSupplier&lt;/code&gt; that will provide the right queue for the right capacity&lt;/li&gt;
  &lt;li&gt;New Introspection API based on &lt;a href="http://projectreactor.io/core/docs/api/index.html?reactor/core/state/package-summary.html"&gt;state&lt;/a&gt; and &lt;a href="http://projectreactor.io/core/docs/api/index.html?reactor/core/state/package-summary.html"&gt;flow&lt;/a&gt; representations.&lt;br/&gt;&amp;ndash; &lt;code&gt;Publisher&lt;/code&gt; Logging with fallback to &lt;code&gt;java.util.logging&lt;/code&gt; or SLF4J if available. Can directly be used on &lt;code&gt;Flux&lt;/code&gt; and &lt;code&gt;Mono&lt;/code&gt; with &lt;a href="http://projectreactor.io/core/docs/api/reactor/core/publisher/Flux.html#log--"&gt;log()&lt;/a&gt; operator.&lt;br/&gt;&amp;ndash; Orthogonal to any other contract including Reactive Streams, everything can be &lt;code&gt;Backpressurable&lt;/code&gt; , a &lt;code&gt;Completable&lt;/code&gt; or be a &lt;code&gt;Receiver&lt;/code&gt; producing to a generic &lt;code&gt;Object&lt;/code&gt; (possibly a Subscriber), which in return allows us to trace down the full graph of a flow and augment it with state indicators:&lt;br/&gt;&lt;img src="https://raw.githubusercontent.com/reactor/projectreactor.io/27f2d8e3cbbed8f8e0d8d27f9c423c906adbbaa4/src/main/static/assets/img/reactor.gif" /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h1&gt;&lt;a href="#what-rsquo-s-on-next" class="anchor" name="what-rsquo-s-on-next"&gt;&lt;/a&gt;What&amp;rsquo;s (on)Next ?&lt;/h1&gt;
&lt;p&gt;We&amp;rsquo;d like to collect your very feedback, you can assault the respective issues repository or join our recently created &lt;a href="http://gitter.im/reactor/reactor"&gt;Gitter channel&lt;/a&gt;. Stay tuned for the next entry about Reactor Stream 2.5.0.M1, the complete Rx over Reactive Streams implementation.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Distributed Tracing with Spring Cloud Sleuth and Spring Cloud Zipkin</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/15/distributed-tracing-with-spring-cloud-sleuth-and-spring-cloud-zipkin" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2016-02-12:2379</id>
    <updated>2016-02-15T17:41:00Z</updated>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;I was inspired by OpenZipkin contributor and Spring Cloud Sleuth and Zipkin contributor &lt;a href="https://twitter.com/adrianfcole"&gt;Adrian Cole&lt;/a&gt;&amp;rsquo;s &lt;a href="https://www.youtube.com/watch?v=f9J1Av8rwCE"&gt;epic talk introducing Zipkin&lt;/a&gt; to write this particular post. There&amp;rsquo;s so much epic stuff in that talk, so once you&amp;rsquo;re done reading this, go watch that!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Advances in technology and cloud computing have made it easier to stand up and deploy services with ease. Cloud computing enables us to automate away the pain (from days or weeks (gasp!) to minutes!) associated with standing up new services. This increase in velocity in turn enables us to be more agile, to think about smaller batches of independently deployable services. The proliferation of new services complicates reasoning about system-wide and request-specific performance characteristics.&lt;/p&gt;
&lt;p&gt;When all of an application&amp;rsquo;s functionality lives in a &lt;em&gt;monolith&lt;/em&gt; - what we call applications written as one, large, unbroken deployable like a &lt;code&gt;.war&lt;/code&gt; or &lt;code&gt;.ear&lt;/code&gt; - it&amp;rsquo;s much easier to reason about where things have gone wrong. Is there a memory leak? It&amp;rsquo;s in the monolith. Is a component not handling requests correctly? It&amp;rsquo;s in the monolith. Messages getting dropped? Also, probably in the monolith. Distribution changes everything.&lt;/p&gt;
&lt;p&gt;Systems behave differently under load and at scale. The specification of a system&amp;rsquo;s behavior often diverges from the actual behavior of the system, and the actual behavior may itself vary in different contexts. It is important to contextualize requests as they transit through a system. It&amp;rsquo;s also important to be able to talk about the nature of a specific request and to be able to understand that specific request&amp;rsquo;s behavior relative to the general behavior of similar requests in the past minute, hour, day (or whatever!) other useful interval provides a statistically significant sampling. Context helps us establish whether a request was abnormal and whether it merits attention. You can&amp;rsquo;t trace bugs in a system until you&amp;rsquo;ve established a baseline for what &lt;em&gt;normal&lt;/em&gt; is. How long is is &lt;em&gt;long&lt;/em&gt;? For some systems it might be microseconds, for others it might be seconds or minutes!&lt;/p&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll look at how Spring Cloud Sleuth, which supports distributed tracing, can help us establish this context and helps us better understand a system&amp;rsquo;s actual behavior, not just its specified behavior.&lt;/p&gt;&lt;h2&gt;&lt;a href="#finding-clues-with-spring-cloud-sleuth" class="anchor" name="finding-clues-with-spring-cloud-sleuth"&gt;&lt;/a&gt;Finding Clues with Spring Cloud Sleuth&lt;/h2&gt;
&lt;p&gt;Tracing is simple, in theory. As a request flows from one component to another in a system, through ingress and egress points, &lt;strong&gt;tracers&lt;/strong&gt; add logic where possible to perpetuate a unique &lt;strong&gt;trace ID&lt;/strong&gt; that&amp;rsquo;s generated when the first request is made. As a request arrives at a component along its journey, a new &lt;strong&gt;span ID&lt;/strong&gt; is assigned for that component and added to the trace. A trace represents the whole journey of a request, and a span is each individual hop along the way, each request. Spans may contain &lt;strong&gt;tags&lt;/strong&gt;, or metadata, that can be used to later contextualize the request. Spans typically contain common tags like start timestamps and stop timestamp, though it&amp;rsquo;s easy to associate semantically relevant tags like an a business entity ID with a span.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://cloud.spring.io/spring-cloud-sleuth/"&gt;Spring Cloud Sleuth&lt;/a&gt; (&lt;code&gt;org.springframework.cloud&lt;/code&gt;:&lt;code&gt;spring-cloud-starter-sleuth&lt;/code&gt;), once added to the CLASSPATH, automatically instruments common communication channels:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;requests over messaging technologies like &lt;a href="https://spring.io/blog/2015/04/15/using-apache-kafka-for-integration-and-data-processing-pipelines-with-spring"&gt;Apache Kafka&lt;/a&gt; or RabbitMQ (or any other &lt;a href="http://cloud.spring.io/spring-cloud-stream/"&gt;Spring Cloud Stream&lt;/a&gt; binder&lt;/li&gt;
  &lt;li&gt;HTTP headers received at Spring MVC controllers&lt;/li&gt;
  &lt;li&gt;requests that pass through a Netflix Zuul microproxy&lt;/li&gt;
  &lt;li&gt;requests made with the &lt;code&gt;RestTemplate&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spring Cloud Sleuth sets up useful log formatting for you that prints the trace ID and the span ID. Assuming you&amp;rsquo;re running Spring Cloud Sleuth-enabled code in a microservice whose &lt;code&gt;spring.application.name&lt;/code&gt; is &lt;code&gt;my-service-id&lt;/code&gt;, you will see something like this in the logging for your microservice:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;2016-02-11 17:12:45.404  INFO [my-service-id,73b62c0f90d11e06,73b62c0f90d11e06,false] 85184 --- [nio-8080-exec-1] com.example.MySimpleComponentMakingARequest     : ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In that example, &lt;code&gt;my-service-id&lt;/code&gt; is the &lt;code&gt;spring.application.name&lt;/code&gt;, &lt;code&gt;73b62c0f90d11e06&lt;/code&gt; is the trace ID and &lt;code&gt;73b62c0f90d11e06&lt;/code&gt; is the span ID. This information is very useful. You can publish your logs to log analysis and manipulation tools like Elasticsearch and Splunk. There are various ways to get that data there. Logstash, for example, is a log publisher that will write to ElasticSearch. Cloud Foundry automatically aggregates logs from all instances of a service into a unified log &lt;a href="https://github.com/cloudfoundry/loggregator"&gt;through a tool called the Loggregator&lt;/a&gt; that can then be forwarded to any &lt;a href="https://en.wikipedia.org/wiki/Syslog"&gt;Syslog&lt;/a&gt;-compatible service, including tools like &lt;a href="http://www.splunk.com/"&gt;Splunk&lt;/a&gt; or &lt;a href="https://papertrailapp.com/"&gt;PaperTrail&lt;/a&gt;. Whatever approach you take, you can do interesting queries if you have all the logs, and the trace information, in a single place available for query and analysis.&lt;/p&gt;
&lt;p&gt;Spring Cloud Sleuth also makes this information available to any Spring Cloud Sleuth-aware Spring application by simply injecting the &lt;code&gt;SpanAccessor&lt;/code&gt;. You can also use this to instrument your own components that aren&amp;rsquo;t already instrumented by Spring Cloud so that they can perpetuate trace information. Naturally, each tracer is going to be different, but Spring Cloud Sleuth&amp;rsquo;s code itself (e.g.: &lt;a href="https://github.com/spring-cloud/spring-cloud-sleuth/blob/master/spring-cloud-sleuth-core/src/main/java/org/springframework/cloud/sleuth/instrument/web/client/TraceFeignClientAutoConfiguration.java"&gt;&lt;code&gt;TraceFeignClientAutoConfiguration&lt;/code&gt;&lt;/a&gt;) is suggestive of how a typical tracer works:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;...&#xD;
	@Autowired&#xD;
	private SpanAccessor spanAccessor;&#xD;
&#xD;
...&#xD;
	Span span = this.spanAccessor.getCurrentSpan();&#xD;
	...&#xD;
	template.header(Span.TRACE_ID_NAME, Span.toHex(span.getTraceId()));&#xD;
	setHeader(template, Span.SPAN_NAME_NAME, span.getName() );&#xD;
	setHeader(template, Span.SPAN_ID_NAME, Span.toHex(span.getSpanId()));&#xD;
...
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#how-much-data-is-enough" class="anchor" name="how-much-data-is-enough"&gt;&lt;/a&gt;How Much Data is Enough?&lt;/h2&gt;
&lt;p&gt;Which requests should be traced? Ideally, you&amp;rsquo;ll want enough data to see trends reflective of live, operational traffic. You don&amp;rsquo;t want to overwhelm your logging and analysis infrastructure, though. Some organizations may only keep requests for every thousand requests, or every ten, or every million! By default, the threshold is 10%, or .1, though you may override it by specifying a sampling percentage:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;spring.sleuth.sampler.percentage = 0.2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, you may register your own &lt;code&gt;Sampler&lt;/code&gt; bean definition and programmatically make the decision which requests should be sampled. You can make more intelligent choices about which things to trace, for example, by ignoring successful requests, perhaps checking whether some component is in an error state, or really anything else. The &lt;code&gt;Span&lt;/code&gt; given as an argument represents the span for the current in-flight request in the larger trace. You can do interesting and request-type specific types of sampling if you&amp;rsquo;d like. You might decide to only sample requests that have a 500 HTTP status code, for example. The following &lt;code&gt;Sampler&lt;/code&gt;, for example, would trace roughly half of all requests:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Bean&#xD;
Sampler customSampler() {&#xD;
	return new Sampler() {&#xD;
		@Override&#xD;
		public boolean isSampled(Span span) {&#xD;
			return Math.random() &amp;gt; .5 ;&#xD;
		}&#xD;
	};&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure to set realistic expectations for your application and infrastructure. It may well be that the usage patterns for your applications require something more sensitive or less sensitive to detect trends and patterns. This is meant to be operational data; most organizations don&amp;rsquo;t warehouse this data more than a few days or, at the upper bound, a week.&lt;/p&gt;&lt;h2&gt;&lt;a href="#seeing-the-big-picture-with-openzipkin" class="anchor" name="seeing-the-big-picture-with-openzipkin"&gt;&lt;/a&gt;Seeing the Big Picture with OpenZipkin&lt;/h2&gt;
&lt;img src="https://raw.githubusercontent.com/joshlong/sleuth-blog/master/images/zipkin-logo.jpg"/&gt;
&lt;p&gt;Data collection is a start but the goal is to &lt;em&gt;understand&lt;/em&gt; the data, not just collect it. In order to appreciate the big picture, we need to get beyond individual events.&lt;/p&gt;
&lt;p&gt;For this we&amp;rsquo;ll use &lt;a href="http://zipkin.io/"&gt;the OpenZipkin project&lt;/a&gt;. OpenZipkin is the fully open-source version of Zipkin, a project that originated at Twitter in 2010, and is based &lt;a href="http://research.google.com/pubs/pub36356.html"&gt;on the Google Dapper papers&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Previously, the open-source version of Zipkin evolved at a different pace than the version used internally at Twitter. OpenZipkin represents the synchronization of those efforts: &lt;a href="http://github.com/openzipkin"&gt;OpenZipkin&lt;/a&gt; &lt;em&gt;is&lt;/em&gt; Zipkin and when we refer to Zipkin in this post, we&amp;rsquo;re referring to the version reflected in OpenZipkin.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Zipkin provides a REST API that clients talk to directly. Zipkin even supports a Spring Boot-based implementation of this REST API. Using that is as simple as using Zipkin&amp;rsquo;s &lt;code&gt;@EnableZipkinServer&lt;/code&gt; directly. The Zipkin Server delegates writes to the persistence tier via a &lt;code&gt;SpanStore&lt;/code&gt;. Presently, there is support for using MySQL or an in-memory &lt;code&gt;SpanStore&lt;/code&gt; out-of-the-box. As an alternative to REST, we can &lt;em&gt;also&lt;/em&gt; publish messages to the Zipkin server over a Spring Cloud Stream binder like RabbitMQ or Apache Kafka. We&amp;rsquo;ll use this option, and &lt;code&gt;org.springframework.cloud&lt;/code&gt;:&lt;code&gt;spring-cloud-sleuth-zipkin-stream&lt;/code&gt;&amp;rsquo;s &lt;code&gt;@EnableZipkinStreamServer&lt;/code&gt;, to adapt incoming Spring Cloud Stream-based Sleuth &lt;code&gt;Span&lt;/code&gt;s into Zipkin&amp;rsquo;s &lt;code&gt;Span&lt;/code&gt;s and then persist them using the &lt;code&gt;SpanStore&lt;/code&gt;. You may use whatever Spring Cloud Stream binding you like, but in this case we&amp;rsquo;ll use Spring Cloud Stream RabbitMQ (&lt;code&gt;org.springframework.cloud&lt;/code&gt;:&lt;code&gt;spring-cloud-starter-stream-rabbitmq&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example;&#xD;
&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.cloud.sleuth.zipkin.stream.EnableZipkinStreamServer;&#xD;
&#xD;
@EnableZipkinStreamServer&#xD;
@SpringBootApplication&#xD;
public class ZipkinQueryServiceApplication {&#xD;
&#xD;
	public static void main(String[] args) {&#xD;
		SpringApplication.run(ZipkinQueryServiceApplication.class, args);&#xD;
	}&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Specify a port in &lt;code&gt;application.properties&lt;/code&gt; to pin the Zipkin server to a well-known port so that the UI may later talk to it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;server.port=9411
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My &lt;a href="https://github.com/joshlong/sleuth-blog"&gt;example code&lt;/a&gt; uses the &lt;a href="https://github.com/joshlong/sleuth-blog/tree/master/eureka-service"&gt;Spring Cloud Netflix-powered Eureka service registry in &lt;code&gt;eureka-servie&lt;/code&gt;&lt;/a&gt; for service registration and discovery, so start that up next.&lt;/p&gt;
&lt;p&gt;Our microservices (&lt;a href="https://github.com/joshlong/sleuth-blog/tree/master/message-client"&gt;&lt;code&gt;message-client&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/joshlong/sleuth-blog/tree/master/message-service"&gt;&lt;code&gt;message-service&lt;/code&gt;&lt;/a&gt;) are typical Spring Cloud microservices. I only added &lt;code&gt;org.springframework.cloud&lt;/code&gt;:&lt;code&gt;spring-cloud-sleuth-stream&lt;/code&gt; and the appropriate Spring Cloud Stream binder to have their Sleuth traces published, out-of-band, to Zipkin for analysis.&lt;/p&gt;
&lt;p&gt;The Zipkin web UI makes it easy to analyze and query Zipkin data. You can run the Zipkin Web &lt;a href="https://github.com/joshlong/sleuth-blog/blob/master/zipkin-web/zipkin-web.sh"&gt;build in my example&lt;/a&gt; or just grab the &lt;a href="http://oss.jfrog.org/artifactory/oss-snapshot-local/io/zipkin/zipkin-web/1.28.1-SNAPSHOT/"&gt;latest from the Zipkin project&amp;rsquo;s builds&lt;/a&gt; and then run it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;java -jar lib/zipkin-web-all.jar -zipkin.web.port=:9412 -zipkin.web.rootUrl=/ -zipkin.web.query.dest=localhost:9411
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the &lt;code&gt;message-service&lt;/code&gt; receives a request it sends a reply message &lt;em&gt;back&lt;/em&gt; to the &lt;code&gt;message-client&lt;/code&gt; over a Spring Cloud Stream binder which the client then accepts and logs with a Spring Integration messaging endpoint. This is a contrived call sequence to demonstrate some of Spring Cloud Sleuth&amp;rsquo;s power.&lt;/p&gt;
&lt;p&gt;Bring up the UI and then find all the recent traces. You can sort by most recent, longest, etc., for finer-grained control over which results you see.&lt;/p&gt;
&lt;img src="https://raw.githubusercontent.com/joshlong/sleuth-blog/master/images/zipkin-ui.png" /&gt;
&lt;p&gt;When I click on one of the traces that comes back, I get a UI that looks like this:&lt;/p&gt;
&lt;img src = "https://raw.githubusercontent.com/joshlong/sleuth-blog/master/images/zipkin-ui-and-resttemplate.png" /&gt;
&lt;p&gt;Each individual span also carries with it information (**_tag_**s) about the particular request with which its associated. You can view this detail by clicking on an individual span:&lt;/p&gt;
&lt;img src ="https://raw.githubusercontent.com/joshlong/sleuth-blog/master/images/zipkin-ui-and-resttemplate-detail.png" /&gt;&lt;h2&gt;&lt;a href="#the-opentracing-initiative" class="anchor" name="the-opentracing-initiative"&gt;&lt;/a&gt;The OpenTracing Initiative&lt;/h2&gt;
&lt;p&gt;For Spring-based workloads, distributed tracing couldn&amp;rsquo;t be easier! However, tracing, by its very nature, is a cross-cutting concern for all services no matter which technology stack they&amp;rsquo;re implemented in. &lt;a href="https://github.com/opentracing"&gt;The OpenTracing initiative&lt;/a&gt; is an effort to standardize the vocabulary and concepts of modern tracing for multiple languages and platforms. The OpenTracing API has support from multiple &lt;em&gt;very&lt;/em&gt; large organizations as its lead one of the original authors on the original Google Dapper paper. The effort defines language bindings; there are already implementations for JavaScript, Python, Go, etc. We will keep Spring Cloud Sleuth conceptually compatible with this effort and will track it. It is expected, but not implied, that the bindings will as often as not have Zipkin as their backend.&lt;/p&gt;&lt;h2&gt;&lt;a href="#next-steps" class="anchor" name="next-steps"&gt;&lt;/a&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;This blog was meant to skim the surface of the concepts and supporting technologies in distributed tracing. We&amp;rsquo;ve looked at Spring Cloud Sleuth and how Spring Cloud Sleuth works with Zipkin. Zipkin itself has an interesting supporting ecosystem. If you really want to understand what distributed tracing tools like Spring Cloud Sleuth, Zipkin, Apache&amp;rsquo;s HTrace and others are modeled after, check &lt;a href="http://research.google.com/pubs/pub36356.html"&gt;out the original Google Dapper paper&lt;/a&gt;. You should check out &lt;a href="https://www.youtube.com/watch?v=f9J1Av8rwCE"&gt;Adrian Cole&amp;rsquo;s introduction to the larger Zipkin ecosystem&lt;/a&gt;. Naturally, the &lt;a href="https://github.com/joshlong/sleuth-blog"&gt;code for this blog is also online&lt;/a&gt;. Finally, look no further than &lt;a href="http://start.spring.io"&gt;the Spring Initializr&lt;/a&gt; and add the Spring Cloud Sleuth Stream and Zipkin Stream Server to your Maven builds to get started.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Developing Spring Boot applications with Kotlin</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>SÃ©bastien Deleuze</name>
    </author>
    <id>tag:spring.io,2016-02-01:2361</id>
    <updated>2016-02-15T12:58:00Z</updated>
    <content type="html">&lt;p&gt;Just in time for &lt;a href="http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/"&gt;Kotlin 1.0 release&lt;/a&gt;, we are adding support for Kotlin language to &lt;a href="https://start.spring.io/#!language=kotlin"&gt;https://start.spring.io&lt;/a&gt; in order to make it easier to start new Spring Boot projects with this language.&lt;/p&gt;
&lt;p&gt;This blog post is also an opportunity for me to explain why I find this language interesting, to show you a sample project in detail and to give you some hints.&lt;/p&gt;&lt;h1&gt;&lt;a href="#what-is-kotlin" class="anchor" name="what-is-kotlin"&gt;&lt;/a&gt;What is Kotlin?&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://kotlinlang.org"&gt;Kotlin&lt;/a&gt; is a language created by &lt;a href="https://www.jetbrains.com/"&gt;JetBrains&lt;/a&gt;. It runs on top of the JVM (but not only), it is an object oriented language that includes many ideas from functional programming. I won&amp;rsquo;t go too much in details about all Kotlin features (&lt;a href="https://kotlinlang.org/docs/kotlin-docs.pdf"&gt;PDF&lt;/a&gt;, &lt;a href="https://kotlinlang.org/docs/reference/"&gt;HTML&lt;/a&gt;), but I would like to highlight the ones I find the most interesting:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Kotlin is a statically typed language, but thanks to its &lt;a href="https://kotlinlang.org/docs/reference/basic-types.html"&gt;clever type inference&lt;/a&gt;, it allows you to write code as short and expressive as dynamic language with performances close to pure Java projects&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://kotlinlang.org/docs/reference/properties.html#declaring-properties"&gt;Properties support&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Relatively lightweight standard library compared to other languages&lt;/li&gt;
  &lt;li&gt;Easy to learn: a Java developer can quickly understand most of the language (this &lt;a href="https://kotlinlang.org/docs/reference/comparison-to-java.html"&gt;quick comparison to Java&lt;/a&gt; is worth to read)&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://kotlinlang.org/docs/reference/java-interop.html"&gt;Java interop&lt;/a&gt; is a first class concern and great&lt;/li&gt;
  &lt;li&gt;Perfect for Android development&lt;/li&gt;
  &lt;li&gt;Built-in immutability and &lt;a href="https://kotlinlang.org/docs/reference/null-safety.html"&gt;null safety&lt;/a&gt; support&lt;/li&gt;
  &lt;li&gt;Code is easy to read, efficient to write&lt;/li&gt;
  &lt;li&gt;Allows to &lt;a href="https://kotlinlang.org/docs/reference/extensions.html"&gt;extend existing libraries&lt;/a&gt; without having to inherit from the class or use any type of design pattern such as Decorator&lt;/li&gt;
  &lt;li&gt;No semicolon required ;-)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will find a lot of useful links to improve your Kotlin knowledge in this &lt;a href="http://blog.jetbrains.com/kotlin/2016/01/kotlin-digest-2015/"&gt;Kotlin digest 2015&lt;/a&gt; blog post. Also have a look to these simple &lt;a href="http://try.kotlinlang.org/koans"&gt;Kotlin exercices&lt;/a&gt; to have a quick overview of the language.&lt;/p&gt;&lt;h1&gt;&lt;a href="#a-sample-spring-boot-kotlin-project" class="anchor" name="a-sample-spring-boot-kotlin-project"&gt;&lt;/a&gt;A sample Spring Boot + Kotlin project&lt;/h1&gt;
&lt;p&gt;Kotlin has been designed to play well with the Java ecosystem, and it seems to me that it shares the same pragmatic, innovative and opinionated mindset as Spring Boot, so they play well together. You can have a look at this simple &lt;a href="https://github.com/sdeleuze/spring-boot-kotlin-demo"&gt;Spring Boot + Spring Data JPA Kotlin project&lt;/a&gt; to see more concretely what it looks like.&lt;/p&gt;
&lt;p&gt;Kotlin allows to write (and read) your domain model easily thanks to &lt;a href="https://kotlinlang.org/docs/reference/data-classes.html"&gt;data classes&lt;/a&gt;. The compiler automatically derives the following members from all properties declared in the primary constructor:&lt;br/&gt; - &lt;code&gt;equals()&lt;/code&gt; / &lt;code&gt;hashCode()&lt;/code&gt; pair&lt;br/&gt; - &lt;code&gt;toString()&lt;/code&gt; of the form &amp;ldquo;Customer(firstName=Foo, lastName=Bar, id=42)&amp;rdquo;&lt;br/&gt; - &lt;code&gt;componentN()&lt;/code&gt; functions corresponding to the properties in their order or declaration&lt;br/&gt; - &lt;code&gt;copy()&lt;/code&gt; function&lt;/p&gt;
&lt;p&gt;You can see that Kotlin allows you to specify parameter default values, and types are declared after the name of the variable/parameter:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint kotlin"&gt;@Entity&#xD;
data class Customer(&#xD;
	var firstName: String = &amp;quot;&amp;quot;,&#xD;
	var lastName: String = &amp;quot;&amp;quot;,&#xD;
	@Id @GeneratedValue(strategy = GenerationType.AUTO)&#xD;
	var id: Long = 0&#xD;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Spring MVC REST controller you can see below is using constructor level injection, and default visibility in Kotlin is &lt;code&gt;public&lt;/code&gt; so no need to specify it. When a function returns a single expression, the curly braces can be omitted and the body is specified after a &lt;code&gt;=&lt;/code&gt; symbol. It is even better since the return type can be inferred by the compiler.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint kotlin"&gt;@RestController&#xD;
class CustomerController @Autowired constructor(val repository:CustomerRepository) {&#xD;
&#xD;
	@RequestMapping(&amp;quot;/&amp;quot;)&#xD;
	fun findAll() = repository.findAll()&#xD;
&#xD;
&#xD;
	@RequestMapping(&amp;quot;/{name}&amp;quot;)&#xD;
	fun findByLastName(@PathVariable name:String)&#xD;
		= repository.findByLastName(name)&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Spring Data repository is self explanatory:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint kotlin"&gt;interface CustomerRepository : CrudRepository&amp;lt;Customer, Long&amp;gt; {&#xD;
	fun findByLastName(name: String): List&amp;lt;Customer&amp;gt;&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since Kotlin supports top-level functions, you can declare your application as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint kotlin"&gt;@SpringBootApplication&#xD;
open class Application {&#xD;
&#xD;
	@Bean&#xD;
	open fun init(repository: CustomerRepository): CommandLineRunner {&#xD;
		return CommandLineRunner {&#xD;
			repository.save(Customer(&amp;quot;Jack&amp;quot;, &amp;quot;Bauer&amp;quot;))&#xD;
			repository.save(Customer(&amp;quot;Chloe&amp;quot;, &amp;quot;O&amp;#39;Brian&amp;quot;))&#xD;
			repository.save(Customer(&amp;quot;Kim&amp;quot;, &amp;quot;Bauer&amp;quot;))&#xD;
			repository.save(Customer(&amp;quot;David&amp;quot;, &amp;quot;Palmer&amp;quot;))&#xD;
			repository.save(Customer(&amp;quot;Michelle&amp;quot;, &amp;quot;Dessler&amp;quot;))&#xD;
		}&#xD;
	}&#xD;
}&#xD;
&#xD;
fun main(args: Array&amp;lt;String&amp;gt;) {&#xD;
	SpringApplication.run(Application::class.java, *args)&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You need to mark &lt;code&gt;@Configuration&lt;/code&gt; classes, some others like most &lt;code&gt;@Component&lt;/code&gt; ones and &lt;code&gt;@Bean&lt;/code&gt; methods as &lt;code&gt;open&lt;/code&gt; because they cannot be &lt;code&gt;final&lt;/code&gt; in Spring due to proxy usage (classes and methods in Kotlin are &lt;code&gt;final&lt;/code&gt; by default without the &lt;code&gt;open&lt;/code&gt; modifier).&lt;/p&gt;&lt;h1&gt;&lt;a href="#additional-hints" class="anchor" name="additional-hints"&gt;&lt;/a&gt;Additional hints&lt;/h1&gt;
&lt;p&gt;Even if Spring Boot and Kotlin work pretty well together, these additional hints may help you.&lt;/p&gt;&lt;h2&gt;&lt;a href="#experiment-with-the-java-to-kotlin-converter" class="anchor" name="experiment-with-the-java-to-kotlin-converter"&gt;&lt;/a&gt;Experiment with the Java to Kotlin converter&lt;/h2&gt;
&lt;p&gt;The Java to Kotlin converter available in IntelliJ IDEA (Menu Code -&amp;gt; Convert Java file to Kotlin file) is quite useful when you can&amp;rsquo;t figure out how to write something in Kotlin. So do not hesitate to write something in Java and use it to find the Kotlin counterpart. This &lt;a href="https://kotlinlang.org/docs/reference/comparison-to-java.html"&gt;comparison to Java documentation&lt;/a&gt; can also provide some help.&lt;/p&gt;&lt;h2&gt;&lt;a href="#property-placeholders" class="anchor" name="property-placeholders"&gt;&lt;/a&gt;Property placeholders&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;$&lt;/code&gt; is used for &lt;a href="https://kotlinlang.org/docs/reference/basic-types.html#string-templates"&gt;String interpolation&lt;/a&gt; in Kotlin, so you should escape it when using property placeholders: &lt;code&gt;@Value(&amp;quot;\${some.property}&amp;quot;)&lt;/code&gt;. As an alternative you can also use &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config-typesafe-configuration-properties"&gt;&lt;code&gt;@ConfigurationProperties&lt;/code&gt;&lt;/a&gt; instead, see &lt;a href="http://stackoverflow.com/a/33883230/1092077"&gt;this Stack Overflow&lt;/a&gt; answer for more details.&lt;/p&gt;&lt;h2&gt;&lt;a href="#array-annotation-attribute" class="anchor" name="array-annotation-attribute"&gt;&lt;/a&gt;Array annotation attribute&lt;/h2&gt;
&lt;p&gt;Unlike Java, Kotlin does not allow to specify array annotation attribute as a single value, so be aware that you will have to write &lt;code&gt;@RequestMapping(&amp;quot;/&amp;quot;, method = arrayOf(RequestMethod.GET))&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#jackson-kotlin-module" class="anchor" name="jackson-kotlin-module"&gt;&lt;/a&gt;Jackson Kotlin Module&lt;/h2&gt;
&lt;p&gt;Last hint, if you are using Jackson you are likely to want to add &lt;a href="https://github.com/FasterXML/jackson-module-kotlin"&gt;&lt;code&gt;com.fasterxml.jackson.module:jackson-module-kotlin&lt;/code&gt;&lt;/a&gt; dependency in order to allow it to deal with data classes with no default constructor or with Kotlin collections.&lt;/p&gt;&lt;h1&gt;&lt;a href="#feedbacks" class="anchor" name="feedbacks"&gt;&lt;/a&gt;Feedbacks&lt;/h1&gt;
&lt;p&gt;We are interested by your feedbacks about developing Spring applications with Kotlin. This blog post is just an introduction, there is much more to say especially about using Spring Boot with more Kotlin idiomatic code like with &lt;a href="https://github.com/JetBrains/Exposed"&gt;Exposed&lt;/a&gt; SQL library, so stay tuned &amp;hellip;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Data Release Train Hopper M1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/12/spring-data-release-train-hopper-m1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Oliver Gierke</name>
    </author>
    <id>tag:spring.io,2016-02-12:2380</id>
    <updated>2016-02-12T15:53:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring Data team I&amp;rsquo;m happy to announce the first milestone of the Hopper release train. The release ships 250 tickets fixed! The most important new features are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Upgrade to Querydsl 4.&lt;/li&gt;
  &lt;li&gt;Integration of Spring Data Neo4j 4.1, Spring Data Couchbase 2.1 and Spring Data Solr 2 (on Solr 5).&lt;/li&gt;
  &lt;li&gt;Support for Redis Cluster.&lt;/li&gt;
  &lt;li&gt;Support for projections on repository query methods in JPA and MongoDB (see &lt;a href="https://github.com/spring-projects/spring-data-examples/tree/master/jpa/example/src/main/java/example/springdata/jpa/projections"&gt;the example&lt;/a&gt; for details).&lt;/li&gt;
  &lt;li&gt;Addition of Spring Data Envers to the release train (previously maintained separately).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Find a curated changelog in our &lt;a href="https://github.com/spring-projects/spring-data-commons/wiki/Release-Train-Hopper"&gt;release train wiki&lt;/a&gt; or skim through a &lt;a href="https://jira.spring.io/issues/?filter=15352"&gt;full list of changes in JIRA&lt;/a&gt;. We&amp;rsquo;re shooting for a release candidate early March and a GA release at the end of the month.&lt;/p&gt;
&lt;p&gt;The easiest way to play with the milestone is declaring the &lt;code&gt;spring-data-releasetrain.version&lt;/code&gt; property to &lt;code&gt;Hopper-M1&lt;/code&gt; in your Spring Boot application. If you&amp;rsquo;re using Solr or Querydsl, make sure you also upgrade these versions as shown in the &lt;a href="https://github.com/spring-projects/spring-data-examples/blob/master/pom.xml#L35"&gt;example&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re looking forward to your feedback!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 1.12 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-commons/1.12.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.12.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.12.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.12.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 1.10 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-jpa/1.10.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.10.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.10.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.10.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Cassandra 1.4 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-cassandra/1.4.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.4.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.4.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.4.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Solr 2.0 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-solr/2.0.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/2.0.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/2.0.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/2.0.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 1.8 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-gemfire/1.8.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.8.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.8.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.8.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 4.1 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-neo4j/4.1.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/4.1.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/4.1.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/4.1.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 1.9 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-mongodb/1.9.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.9.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.9.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.9.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 1.0 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-envers/1.0.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/envers/docs/1.0.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/envers/docs/1.0.0.M1/reference/html"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 1.1 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-keyvalue/1.1.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/1.1.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/1.1.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/1.1.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 2.5 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-rest-webmvc/2.5.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.5.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.5.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.5.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 1.7 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-redis/1.7.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.7.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.7.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.7.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 1.4 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-elasticsearch/1.4.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.4.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.4.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/1.4.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 2.1 M1 - &lt;a href="https://repo.spring.io/libs-milestone/org/springframework/data/spring-data-couchbase/2.1.0.M1"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/2.1.0.M1/api"&gt;JavaDocs&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/2.1.0.M1/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/2.1.0.M1/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>From Vienna to Riga and London</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/11/from-vienna-to-riga-and-london" />
    <category term="news" label="News and Events" />
    <author>
      <name>Juergen Hoeller</name>
    </author>
    <id>tag:spring.io,2016-02-10:2377</id>
    <updated>2016-02-11T10:00:50Z</updated>
    <content type="html">&lt;p&gt;In early March, I&amp;rsquo;ll be speaking at &lt;a href="https://voxxeddays.com/vienna16/"&gt;VoxxedDays Vienna&lt;/a&gt; on the 1st, &lt;a href="http://rigadevday.lv/"&gt;Riga Dev Day&lt;/a&gt; on the 2nd, as well as &lt;a href="https://qconlondon.com/"&gt;QCon London&lt;/a&gt; on the 7th. Aside from my 4.3 component model discussion, I&amp;rsquo;ll also do a Spring Framework 5.0 preview &amp;amp; roadmap talk for the first time (in Riga as well as London).&lt;/p&gt;
&lt;p&gt;Looking forward to those shows! See you there&amp;hellip;&lt;/p&gt;
&lt;p&gt;Juergen&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Session 1.1.0 RC1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/11/spring-session-1-1-0-rc1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Rob Winch</name>
    </author>
    <id>tag:spring.io,2016-02-11:2378</id>
    <updated>2016-02-11T07:19:48Z</updated>
    <content type="html">&lt;p&gt;On behalf of the community, I&amp;rsquo;m pleased to announce the release of Spring Session 1.1.0.RC1. &lt;a href="https://repo.spring.io/milestone/org/springframework/session/spring-session-data-redis/1.1.0.RC1/"&gt;The release&lt;/a&gt; can be found in the &lt;a href="https://github.com/spring-projects/spring-framework/wiki/Spring-repository-FAQ#what-repositories-are-available"&gt;Spring Milestone Repository&lt;/a&gt; (&lt;a href="https://repo.spring.io/milestone/)"&gt;https://repo.spring.io/milestone/)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release contains lots of fixes and new features. You can find details in the &lt;a href="http://docs.spring.io/spring-session/docs/1.1.0.RC1/reference/html5/#what-s-new-in-1-1"&gt;What&amp;rsquo;s New in 1.1&lt;/a&gt; The highlights of 1.1.0.RC1 have been included below:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for &lt;a href="http://docs.spring.io/spring-session/docs/1.1.0.RC1/reference/html5/#httpsession-gemfire"&gt;GemFire&lt;/a&gt; Thanks to &lt;a href="https://twitter.com/john_blum"&gt;John Blum&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Allow writing to Redis immediately (instead of lazily) using &lt;a href="http://docs.spring.io/spring-session/docs/1.1.0.RC1/reference/html5/#api-redisoperationssessionrepository-config"&gt;redisFlushMode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We look forward to your feedback and if all goes well plan to release 1.1.0.RELEASE in the next few weeks.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-session/"&gt;Site&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-session/docs/1.1.0.RC1/reference/html5/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-session/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-session"&gt;Help&lt;/a&gt; &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>We have adopted a Contributor Code of Conduct!</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/10/we-have-adopted-a-contributor-code-of-conduct" />
    <category term="news" label="News and Events" />
    <author>
      <name>Chelsea Troy</name>
    </author>
    <id>tag:spring.io,2016-02-04:2368</id>
    <updated>2016-02-10T19:05:00Z</updated>
    <content type="html">&lt;p&gt;We have an exciting announcement to make!&lt;/p&gt;
&lt;p&gt;The Spring projects are about developing fast, flexible Java apps. &lt;/p&gt;
&lt;p&gt;But there&amp;rsquo;s a driving force behind the technologyâits people. We open-source our projects to welcome our community into making Spring the best it can be.&lt;/p&gt;
&lt;p&gt;Now we are taking another step in that direction. Each of the active Spring projects has adopted a Contributor Code of Conduct! &lt;a href="https://github.com/spring-projects/spring-framework/blob/master/CODE_OF_CONDUCT.adoc"&gt;You can look at the contributor code of conduct right here&lt;/a&gt;, and you&amp;rsquo;ll find a copy in each of our repositories on Github. &lt;/p&gt;
&lt;p&gt;We want people from minority groups in tech to feel welcome to contribute to Spring. Contributor codes of conduct improve the experience of open source participation for people in those groups.&lt;/p&gt;
&lt;p&gt;That is why we have committed to making participation in the Spring projects a harassment-free experience for everyone, regardless of level of experience, gender, gender identity or expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality. &lt;/p&gt;
&lt;p&gt;We also have a place for contributors to direct their concerns if they feel that the code of conduct has been breached. If you notice or experience discrimination or hurtful comments while participating in any Spring project, you can reach out to us at &lt;a href="mailto:&amp;#x73;&amp;#112;&amp;#114;&amp;#105;&amp;#110;&amp;#103;&amp;#x2d;&amp;#x63;&amp;#111;&amp;#100;&amp;#101;&amp;#45;&amp;#x6f;&amp;#102;&amp;#45;&amp;#99;&amp;#x6f;&amp;#110;&amp;#100;&amp;#x75;&amp;#99;&amp;#x74;&amp;#x40;&amp;#x70;&amp;#x69;&amp;#118;&amp;#x6f;&amp;#116;&amp;#97;l&amp;#46;&amp;#x69;&amp;#x6f;"&gt;&amp;#x73;&amp;#112;&amp;#114;&amp;#105;&amp;#110;&amp;#103;&amp;#x2d;&amp;#x63;&amp;#111;&amp;#100;&amp;#101;&amp;#45;&amp;#x6f;&amp;#102;&amp;#45;&amp;#99;&amp;#x6f;&amp;#110;&amp;#100;&amp;#x75;&amp;#99;&amp;#x74;&amp;#x40;&amp;#x70;&amp;#x69;&amp;#118;&amp;#x6f;&amp;#116;&amp;#97;l&amp;#46;&amp;#x69;&amp;#x6f;&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Data Couchbase 2.0</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/10/spring-data-couchbase-2-0" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2016-02-10:2376</id>
    <updated>2016-02-10T12:35:46Z</updated>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;This is a cross-post blog from Simon BASLÃ from &lt;a href="http://www.couchbase.com"&gt;Couchbase&lt;/a&gt;. You can find him on twitter (&lt;a href="https://twitter.com/simonbasle"&gt;&lt;code&gt;@simonbasle&lt;/code&gt;&lt;/a&gt;) or &lt;a href=""&gt;github&lt;/a&gt;. Learn more about Couchbase and the Couchbase Java SDK on the &lt;a href="http://developer.couchbase.com/documentation/server/4.1/sdks/java-2.2/java-intro.html"&gt;developer portal&lt;/a&gt;. Thanks again, Simon and great job to you and your team! -Josh&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Spring Data Couchbase 2.0 is a rewrite of the original Spring Data Couchbase 1.4.x connector. It is based on the Couchbase Java 2.2 SDK and makes heavy use of the new query language N1QL (which was introduced in Couchbase Server 4.0) to offer more features for Spring Data users.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://blog.couchbase.com/2015/august/spring-data-couchbase-2.0-preview"&gt;first Milestone&lt;/a&gt; has been released last august, then a Release Candidate followed, and since then additional features (and bugfixes) were implemented a GA release can now be unleashed on the public.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take a quick tour of what changed (with a â­ to â­â­â­ notation of how awesome and significant we think each feature is &#x1f604;):&lt;/p&gt;&lt;h2&gt;&lt;a href="#new-features-in-spring-data-couchbase-2-0" class="anchor" name="new-features-in-spring-data-couchbase-2-0"&gt;&lt;/a&gt;New Features in Spring Data Couchbase 2.0&lt;/h2&gt;
&lt;p&gt;The main differences between the 1.x generation of Spring Data Couchbase and its 2.x version are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Configuration elements are closer to the Couchbase reality: Environment, Cluster, Bucket (potentially allowing you to create &lt;code&gt;CouchbaseTemplate&lt;/code&gt;s that each connect to a different bucket, or even to different clusters!)&lt;/li&gt;
  &lt;li&gt;Backing custom repository methods is not always done with views anymore, it is (by default) now done via N1QL, which is much more flexible and requires less server-side maintenance.&lt;/li&gt;
  &lt;li&gt;Custom methods using views have been modified a little to better stick to the Spring Data philosophy. This reduces flexibility a little bit, but the implementations are generated from the method name (through &amp;ldquo;query derivation&amp;rdquo;).&lt;/li&gt;
  &lt;li&gt;You can now do geospatial querying of your data (or multidimensional querying if you go beyond 3 dimensions) with views.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course you can still access the lower level API by using the &lt;code&gt;CouchbaseTemplate&lt;/code&gt; rather than the &lt;code&gt;CouchbaseRepository&lt;/code&gt; interface, and you can even access the underlying &lt;code&gt;Bucket&lt;/code&gt; from the SDK.&lt;/p&gt;&lt;h3&gt;&lt;a href="#repository-methods-through-n1ql" class="anchor" name="repository-methods-through-n1ql"&gt;&lt;/a&gt;Repository methods through N1QL&lt;/h3&gt;
&lt;p&gt;â­â­â­&lt;/p&gt;
&lt;p&gt;The big new feature in Couchbase 4.0 is &lt;strong&gt;N1QL&lt;/strong&gt;, a SQL extension that works on JSON documents (so it added JSON-related specificities to SQL).&lt;/p&gt;
&lt;p&gt;This is especially great for the &lt;code&gt;Repository&lt;/code&gt; pattern and query derivation in Spring Data, because the vast majority of query derivation keywords can be easily translated to N1QL.&lt;/p&gt;
&lt;p&gt;N1QL is now the default backing Couchbase feature for Repository methods. You can also elect to use the @Query interface if you want to be explicit on the query executed.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;public interface UserRepository extends Repository&amp;lt;User, String&amp;gt; {&#xD;
&#xD;
  User findByUsernameEquals(String username);&#xD;
&#xD;
  List&amp;lt;User&amp;gt; findByUsernameContains(String contains);&#xD;
&#xD;
  @Query //optional for N1QL query derivation but more explicit&#xD;
  List&amp;lt;User&amp;gt; findByAgeBetween(int minAge, int maxAge);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a href="#repository-methods-through-views" class="anchor" name="repository-methods-through-views"&gt;&lt;/a&gt;Repository methods through Views&lt;/h3&gt;
&lt;p&gt;â­â­&lt;/p&gt;
&lt;p&gt;One big change in this version is that now, Repository Queries (aka custom repository methods) that are based on views are more in line with the Spring Data philosophy. They also have to be annotated explicitly with &lt;code&gt;@View(viewName=&amp;quot;something&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This means that nothing Couchbase-specific should leak into your repository interface. Instead, what you can do is use query derivation mechanisms for most of the queries.&lt;/p&gt;
&lt;p&gt;Query derivation is also possible to a small extent, with a few keywords being accepted in a view-backed method.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;public interface UserRepository extends Repository&amp;lt;User, String&amp;gt; {&#xD;
&#xD;
  @Override&#xD;
  @View(designDocument = &amp;quot;user&amp;quot;, viewName = &amp;quot;customFindAllView&amp;quot;)&#xD;
  Iterable&amp;lt;User&amp;gt; findAll();&#xD;
&#xD;
  @View(viewName = &amp;quot;customFindByNameView&amp;quot;)&#xD;
  User findByUsernameIs(String lowKey);&#xD;
&#xD;
  @View(viewName = &amp;quot;customFindByNameView&amp;quot;)&#xD;
  List&amp;lt;User&amp;gt; findByUsernameBetween(String lowKey, String highKey);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a href="#using-reduce-function-from-views" class="anchor" name="using-reduce-function-from-views"&gt;&lt;/a&gt;Using reduce function from Views&lt;/h3&gt;
&lt;p&gt;â­&lt;/p&gt;
&lt;p&gt;Another new thing that wasn&amp;rsquo;t previously supported is the execution of the reduce function if you have one. Now, in order to execute it, you simply set the &lt;code&gt;reduce&lt;/code&gt; flag to true in the &lt;code&gt;@View&lt;/code&gt; annotation.&lt;/p&gt;
&lt;p&gt;You could also prefix your method with &amp;ldquo;count&amp;rdquo; instead of &amp;ldquo;find&amp;rdquo; if that is meaningful to you (ie. you actually use the &amp;ldquo;count&amp;rdquo; reduce function).&lt;/p&gt;
&lt;p&gt;Note that the reduce function in Couchbase can be something else than the preexisting _count one, and could even return something else than a long like a &lt;code&gt;JsonObject&lt;/code&gt;, like for built-in &lt;code&gt;_stats&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Similarly, adding the variation &amp;ldquo;topX&amp;rdquo; or &amp;ldquo;firstX&amp;rdquo; in a method name will result in an additional limit being set on the request (eg. &lt;code&gt;findFirst5ByLastName&lt;/code&gt; will limit the list to 5 results).&lt;/p&gt;&lt;h3&gt;&lt;a href="#configuring-consistency-read-your-own-writes" class="anchor" name="configuring-consistency-read-your-own-writes"&gt;&lt;/a&gt;Configuring consistency, Read Your Own Writes&lt;/h3&gt;
&lt;p&gt;â­â­â­&lt;/p&gt;
&lt;p&gt;One thing that comes up often when using asynchronously populated secondary indexes like views and GSI (the new secondary index engine backing N1QL), is the need to immediately read the modifications from your previous write operations.&lt;/p&gt;
&lt;p&gt;This implies that the view/N1QL shouldn&amp;rsquo;t answer as long as the data is still in the process of being indexed, so this sacrifices some performance in favor of consistency.&lt;/p&gt;
&lt;p&gt;The opposite (and current default for Spring Data Couchbase) is to favor performance by accepting stale data to be returned.&lt;/p&gt;
&lt;p&gt;We added global semantics for configuring all queries (view-based or N1QL-based) that are constructed by the framework through query derivation, by providing a small abstraction around the concept of Consistency.&lt;/p&gt;
&lt;p&gt;This is done by overriding the &lt;code&gt;AbstractCouchbaseConfiguration&lt;/code&gt;&amp;rsquo;s &lt;code&gt;getDefaultConsistency()&lt;/code&gt; method. &lt;code&gt;Consistency&lt;/code&gt; is an enum that lets you choose between &lt;code&gt;READ_YOUR_OWN_WRITES&lt;/code&gt;, &lt;code&gt;STRONGLY_CONSISTENT&lt;/code&gt;, &lt;code&gt;UPDATE_AFTER&lt;/code&gt; and &lt;code&gt;EVENTUALLY_CONSISTENT&lt;/code&gt;. Please refer to the official documentation for more information on how they work exactly and what their impact is at query time.&lt;/p&gt;
&lt;p&gt;You can also do that in XML by using the consistency attribute on the &lt;code&gt;&amp;lt;couchbase:template&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;Since GA, CRUD methods in repositories now also take the default configured consistency into account.&lt;/p&gt;&lt;h3&gt;&lt;a href="#changing-the-type-information-field-in-stored-json" class="anchor" name="changing-the-type-information-field-in-stored-json"&gt;&lt;/a&gt;Changing the type information field in stored JSON&lt;/h3&gt;
&lt;p&gt;â­&lt;/p&gt;
&lt;p&gt;Some users have reported issues with Spring Data and the Couchbase Mobile side of things, with the Sync Gateway rejecting documents containing fields prefixed by an underscore.&lt;/p&gt;
&lt;p&gt;This is problematic for Spring Data, since by default it stores the type information in a &lt;code&gt;_class&lt;/code&gt; field :(&lt;/p&gt;
&lt;p&gt;The solution is to allow, through the configuration, to modify the name of that type information field. You can do so by overriding the &lt;code&gt;typeKey()&lt;/code&gt; method in &lt;code&gt;AbstractCouchbaseConfiguration&lt;/code&gt;. For instance, you can use the constant &lt;code&gt;MappingCouchbaseConverter.TYPEKEY_SYNCGATEWAY_COMPATIBLE&lt;/code&gt; (which is &amp;ldquo;&lt;code&gt;javaClass&lt;/code&gt;&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;This field is the one used by generated N1QL queries to filter only documents corresponding to the repository&amp;rsquo;s entity.&lt;/p&gt;&lt;h3&gt;&lt;a href="#support-for-code-pageable-code-code-pagerequest-code-in-n1ql-derived-queries" class="anchor" name="support-for-code-pageable-code-code-pagerequest-code-in-n1ql-derived-queries"&gt;&lt;/a&gt;Support for &lt;code&gt;Pageable&lt;/code&gt;/&lt;code&gt;PageRequest&lt;/code&gt; in N1QL derived queries&lt;/h3&gt;
&lt;p&gt;â­â­&lt;/p&gt;
&lt;p&gt;Using N1QL, for queries that are generated through query derivation, &lt;code&gt;Pageable&lt;/code&gt; and &lt;code&gt;Sort&lt;/code&gt; parameters are now supported.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for &lt;code&gt;PagingAndSortingRepository&lt;/code&gt; based on N1QL.&lt;/li&gt;
  &lt;li&gt;Adds two &lt;code&gt;findAll&lt;/code&gt; methods that rely on N1QL for paging and/or sorting. Uses the default configured consistency.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#geospatial-and-multi-dimensional-querying-using-spatial-views" class="anchor" name="geospatial-and-multi-dimensional-querying-using-spatial-views"&gt;&lt;/a&gt;GeoSpatial and Multi-Dimensional querying using Spatial Views&lt;/h3&gt;
&lt;p&gt;â­â­â­&lt;/p&gt;
&lt;p&gt;Query Couchbase using coordinates! Provided your entity has a &lt;code&gt;Point&lt;/code&gt; (or &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;) location, you can find it using:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;a bounding box: &lt;code&gt;findByLocationWithin(Box area)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;a circle: &lt;code&gt;findByLocationWithin(Circle area)&lt;/code&gt;, &lt;code&gt;findByLocationWithin(Point center, Distance radius)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;a polygon: &lt;code&gt;findByLocationWithin(Polygon area)&lt;/code&gt;, &lt;code&gt;findByLocationWithin(Point[] polygon)&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;a distance &lt;code&gt;findByLocationNear(Point near, Distance maxDistance)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Circle and polygon-like queries are performed fast as bounding box approximations on the server then the false positives are eliminated by the framework before presenting results.&lt;/p&gt;
&lt;p&gt;You can take advantage of the multidimensional aspect of Couchbase Spatial Views to add extra dimensions to your queries (e.g. stores that open late at night within a city&amp;hellip;).&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;public interface DimensionalPartyRepository extends CrudRepository&amp;lt;Party, String&amp;gt; {&#xD;
&#xD;
  @Dimensional(designDocument = &amp;quot;partyGeo&amp;quot;, spatialViewName = &amp;quot;byLocation&amp;quot;)&#xD;
  List&amp;lt;Party&amp;gt; findByLocationNear(Point p, Distance d);&#xD;
&#xD;
  @Dimensional(designDocument = &amp;quot;partyGeo&amp;quot;, spatialViewName = &amp;quot;byLocation&amp;quot;)&#xD;
  List&amp;lt;Party&amp;gt; findByLocationWithin(Box boundingBox);&#xD;
&#xD;
  @Dimensional(designDocument = &amp;quot;partyGeo&amp;quot;, spatialViewName = &amp;quot;byLocation&amp;quot;)&#xD;
  List&amp;lt;Party&amp;gt; findByLocationWithin(Polygon zone);&#xD;
  &#xD;
  @Dimensional(designDocument = &amp;quot;partyGeo&amp;quot;, spatialViewName = &amp;quot;byLocationAndAttendees&amp;quot;, dimensions = 3)&#xD;
  List&amp;lt;Party&amp;gt; findByLocationWithinAndAttendeesGreaterThan(Polygon zone, double minAttendees);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: if you want to reuse annotations, you can do that too (works for &lt;code&gt;@View&lt;/code&gt; and &lt;code&gt;@Query&lt;/code&gt; too):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;public interface DimensionalPartyRepository extends CrudRepository&amp;lt;Party, String&amp;gt; {&#xD;
&#xD;
  //define your own meta-annotation&#xD;
  @Dimensional(designDocument = &amp;quot;partyGeo&amp;quot;, spatialViewName = &amp;quot;byLocation&amp;quot;, dimensions = 2)&#xD;
  @Retention(RetentionPolicy.RUNTIME)&#xD;
  @interface IndexedByLocation { }&#xD;
  &#xD;
  //use it :)&#xD;
  @IndexedByLocation&#xD;
  List&amp;lt;Party&amp;gt; findByLocationNear(Point p, Distance d);&#xD;
&#xD;
  @IndexedByLocation&#xD;
  List&amp;lt;Party&amp;gt; findByLocationWithin(Box boundingBox);&#xD;
&#xD;
  @IndexedByLocation&#xD;
  List&amp;lt;Party&amp;gt; findByLocationWithin(Polygon zone);&#xD;
  &#xD;
  //here we use a variation with 3 dimensions, so we need to revert to @Dimensional&#xD;
  @Dimensional(designDocument = &amp;quot;partyGeo&amp;quot;, spatialViewName = &amp;quot;byLocationAndAttendees&amp;quot;, dimensions = 3)&#xD;
  List&amp;lt;Party&amp;gt; findByLocationWithinAndAttendeesGreaterThan(Polygon zone, double minAttendees);&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a href="#inline-code-n1ql-code-code-query-code-now-have-spel-support" class="anchor" name="inline-code-n1ql-code-code-query-code-now-have-spel-support"&gt;&lt;/a&gt;Inline &lt;code&gt;N1QL&lt;/code&gt; &lt;code&gt;@Query&lt;/code&gt; now have SpEL support&lt;/h3&gt;
&lt;p&gt;â­â­â­&lt;/p&gt;
&lt;p&gt;Inline queries can use SpEL notation to:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;ensure that correct selection and filtering is applied to the statement in order to construct and return entities: use &lt;code&gt;#{#n1ql.selectEntity}&lt;/code&gt; to generate a &lt;code&gt;SELECT ... FROM ...&lt;/code&gt; clause, and &lt;code&gt;#{#n1ql.filter}&lt;/code&gt; in the &lt;code&gt;WHERE&lt;/code&gt; clause to limit query to the correct entity.&lt;/li&gt;
  &lt;li&gt;compute values or retrieve data from external SpEL value provides configured in the Spring context.&lt;/li&gt;
&lt;/ol&gt;&lt;h3&gt;&lt;a href="#repository-ldquo-main-rdquo-indexes-creation-can-be-automatically-triggered" class="anchor" name="repository-ldquo-main-rdquo-indexes-creation-can-be-automatically-triggered"&gt;&lt;/a&gt;Repository &amp;ldquo;main&amp;rdquo; indexes creation can be automatically triggered&lt;/h3&gt;
&lt;p&gt;â­â­&lt;/p&gt;
&lt;p&gt;â ï¸ &lt;strong&gt;&lt;em&gt;IMPORTANT: this is considered as an aid during development/testing and discouraged in production&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order to make sure that N1QL indexing of the entities in a given repository is activated in a dev or pre-production environment, one can annotate it with &lt;code&gt;@N1qlPrimaryIndexed&lt;/code&gt; (which enables bucket-wide freeform querying) and &lt;code&gt;@N1qlSecondaryIndexed&lt;/code&gt; (which will index only the documents corresponding to the entity type, similarly to the WHERE clause produced by SpEL &lt;code&gt;#{#n1ql.filter}&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Also, the backing view for CRUD operation can be automatically created by annotating the repository with &lt;code&gt;@ViewIndexed&lt;/code&gt; (you&amp;rsquo;ll need to provide the design document name, which should correspond to the entity&amp;rsquo;s simple class name with a lowercase first letter).&lt;/p&gt;
&lt;p&gt;This feature must additionally be opted-in by redefining the &lt;code&gt;indexManager&lt;/code&gt; bean in the &lt;code&gt;AbstractCouchbaseConfiguration&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a href="#simple-return-types-primitives-and-code-string-code-are-now-supported-when-using-a-single-row-projection" class="anchor" name="simple-return-types-primitives-and-code-string-code-are-now-supported-when-using-a-single-row-projection"&gt;&lt;/a&gt;Simple return types (primitives and &lt;code&gt;String&lt;/code&gt;) are now supported when using a single-row projection&lt;/h3&gt;
&lt;p&gt;â­â­&lt;/p&gt;
&lt;p&gt;This is especially targeted at inline N1QL queries with aggregation functions like &lt;code&gt;COUNT(*)&lt;/code&gt;, &lt;code&gt;AVG(field)&lt;/code&gt;, etc&amp;hellip; The query must return a single row with a single projection.&lt;/p&gt;&lt;h3&gt;&lt;a href="#support-named-parameters-in-n1ql-inline-queries" class="anchor" name="support-named-parameters-in-n1ql-inline-queries"&gt;&lt;/a&gt;Support named parameters in N1QL inline queries&lt;/h3&gt;
&lt;p&gt;â­â­&lt;/p&gt;
&lt;p&gt;Use either named parameters or positional parameter, but not both. Syntax for named parameters is &lt;code&gt;$paramName&lt;/code&gt;, requiring that each method parameter be annotated with &lt;code&gt;@Param(&amp;quot;paramName&amp;quot;)&lt;/code&gt;.&lt;/p&gt;&lt;h3&gt;&lt;a href="#other-features" class="anchor" name="other-features"&gt;&lt;/a&gt;Other Features&lt;/h3&gt;
&lt;p&gt;â­&lt;/p&gt;
&lt;p&gt;Other features include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Fix bean naming so that all beans created by Spring Data Couchbase are prefixed with &amp;ldquo;&lt;code&gt;couchbase&lt;/code&gt;&amp;rdquo;, in order to avoid clashes with other stores.&lt;/li&gt;
  &lt;li&gt;Changing the base class for all repositories is now supported (following the process documented in the common Spring Data documentation)&lt;/li&gt;
  &lt;li&gt;In case indexes are stale, deleted documents are eliminated from find methods in the &lt;code&gt;CouchbaseTemplate&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Expiry can be set on a &lt;code&gt;@Document&lt;/code&gt;, as a &lt;code&gt;long&lt;/code&gt; + &lt;code&gt;timeUnit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few bugfixes and improvements over RC1 have also been implemented.&lt;/p&gt;&lt;h2&gt;&lt;a href="#documentation" class="anchor" name="documentation"&gt;&lt;/a&gt;Documentation&lt;/h2&gt;
&lt;p&gt;â­â­â­&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.spring.io/spring-data/couchbase/docs/2.0.0.RELEASE/reference/html/"&gt;Documentation&lt;/a&gt; has also been improved, adding Couchbase-oriented examples on how to add the implementation of a custom method to a repository, how to change the base class of all repositories, how to deal with SpEL in inline queries, &amp;hellip;&lt;/p&gt;&lt;h2&gt;&lt;a href="#a-note-about-spring-cache" class="anchor" name="a-note-about-spring-cache"&gt;&lt;/a&gt;A note about Spring Cache&lt;/h2&gt;
&lt;p&gt;The Spring Cache support has been moved out of the Spring Data repository. It is still there and we plan on improving on it. You can for now find it on a Couchbase &lt;a href="https://github.com/couchbaselabs/couchbase-spring-cache"&gt;repository&lt;/a&gt; on github but it should soon reintegrate the official Spring family of projects.&lt;/p&gt;&lt;h2&gt;&lt;a href="#getting-spring-data-couchbase" class="anchor" name="getting-spring-data-couchbase"&gt;&lt;/a&gt;Getting Spring Data Couchbase&lt;/h2&gt;
&lt;p&gt;You can add the following to your project&amp;rsquo;s &lt;code&gt;pom.xml&lt;/code&gt; to get this GA Release (in the &lt;code&gt;dependencies&lt;/code&gt; section:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;!--&amp;lt;dependencies&amp;gt;--&amp;gt;&#xD;
  &amp;lt;dependency&amp;gt;&#xD;
    &amp;lt;groupId&amp;gt;org.springframework.data&amp;lt;/groupId&amp;gt;&#xD;
    &amp;lt;artifactId&amp;gt;spring-data-couchbase&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;version&amp;gt;2.0.0.RELEASE&amp;lt;/version&amp;gt;&#xD;
  &amp;lt;/dependency&amp;gt;&#xD;
&amp;lt;!--&amp;lt;/dependencies&amp;gt;--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We hope you enjoy this release and all the new features it brings to the table. Next step will be to re-attach to the &lt;code&gt;Hopper&lt;/code&gt; release train with a version &lt;code&gt;2.1&lt;/code&gt; expected before Summer.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - February 9th, 2016</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/09/this-week-in-spring-february-9th-2016" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2016-02-09:2372</id>
    <updated>2016-02-09T16:46:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installation of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I&amp;rsquo;m in beautiful Stockholm, Sweden at the &lt;a href="http://twitter.com/jfokus"&gt;amazing JFokus conference&lt;/a&gt;. It&amp;rsquo;s also &lt;em&gt;Shrove Tuesday&lt;/em&gt; here in Sweden and the custom is to over-indulge, so as &lt;a href="https://en.m.wikipedia.org/wiki/Semla"&gt;I type this I am eating a Semla&lt;/a&gt;. I hope you too enjoy over-indulging on this week&amp;rsquo;s epic roundup! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;the world&amp;rsquo;s worst kept secret is &lt;em&gt;finally&lt;/em&gt; announced! We&amp;rsquo;ve been developing a reactive runtime for Spring MVC, and you can start to kick the tires! Check out this amazing &lt;a href="https://spring.io/blog/2016/02/09/reactive-spring"&gt;blog on Spring 5&amp;rsquo;s ambitions for reactive web programming&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Spring Cloud Stream lead Marius Bogoevici has just announced Spring Cloud Stream 1.0.0.M4 which, among other things, defaults to publish/subscribe semantics, supports a notion of consumer groups, provides a simplified binder SPI, resettable Kafka offsets, and &lt;em&gt;so&lt;/em&gt; much more! Check it out!&lt;/li&gt;
  &lt;li&gt;the &lt;a href="https://github.com/spring-projects/spring-data-couchbase/tree/2.0.0.RELEASE"&gt;2.0.0.RELEASE of Spring Data Couchbase just dropped!&lt;/a&gt;. I suspect there&amp;rsquo;ll be a blog or something announcing it, but in the meantime, grab the bits and try it out!&lt;/li&gt;
  &lt;li&gt;the good Dr. David Syer&amp;rsquo;s added new &lt;a href="https://spring.io/guides/tutorials/spring-boot-oauth2/#_custom_error"&gt;chapters to the Spring &amp;amp; OAuth tutorial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I put together a little &lt;a href="https://spring.io/blog/2016/02/07/orchestrating-work-with-activiti-and-spring-integration"&gt;post on using Activit and Spring Integration together&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;our pal Nicolas Frankel has put together &lt;a href="https://blog.frankel.ch/designing-your-own-spring-boot-starter-part-1"&gt;a nice post demystifying the power of Spring Boot&amp;rsquo;s autoconfiguration&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;if you couldn&amp;rsquo;t make it to SpringOne2GX 2015 &lt;a href="http://www.infoq.com/presentations/spring-boot-web"&gt;to see Brian Clozel and StÃ©phane Nicoll&amp;rsquo;s presentation on using Spring Boot in the web tier&lt;/a&gt;, then you&amp;rsquo;ll love that it&amp;rsquo;s available online&lt;/li&gt;
  &lt;li&gt;Oracle Netbean&amp;rsquo;s lead and all-around great guy Geertjan Wielenga and I were talking about integration with Spring Boot and Netbeans and &lt;a href="https://blogs.oracle.com/geertjan/entry/spring_boot_scenario_with_netbeans"&gt;he wrote up his play-by-play on a great Oracle blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;the Heroku documentation have &lt;a href="https://devcenter.heroku.com/articles/deploying-spring-boot-apps-to-heroku"&gt;recently updated to include a expanded discussion on deploying Spring Boot applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Our pal Michael Simmons has &lt;a href="https://github.com/michael-simons/wro4j-spring-boot-starter"&gt;developed a very useful-looking WRO4J Spring Boot starter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Dan Vega&amp;rsquo;s just put together a nice little &lt;a href="https://www.youtube.com/watch?v=MgOdvqvF6gk"&gt;video on how to send email with Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;our pal Petri Kainulainen&amp;rsquo;s back at it again with a nice post on getting the &lt;a href="http://www.petrikainulainen.net/programming/spring-framework/spring-batch-tutorial-getting-the-required-dependencies-with-gradle/"&gt;required dependencies from Gradle for a Spring Batch application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I like this Japanese-language post &lt;a href="https://matsumana.info/blog/2016/02/06/spring-boot-hikaricp-metrics/"&gt;on using the HikariCP from a Spring Boot application and on exposing its metrics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I &lt;em&gt;love&lt;/em&gt; this post from our very own &lt;a href="http://twitter.com/mkheck"&gt;Mark Heckler&lt;/a&gt; &lt;a href="http://www.thehecklers.org/2016/02/01/spring-boot-for-iot-developers-getting-started/"&gt;on Spring Boot for IoT developers&lt;/a&gt;. This is the first in a series, so stay tuned!&lt;/li&gt;
  &lt;li&gt;great post from &lt;a href="http://www.broadleafcommerce.com/blog/Preventing-Session-Hijacking-With-Spring"&gt;Broadleaf Commerce on preventing session hijacking with Spring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: IoT Realized - The Connected Car v2</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/09/springone2gx-2015-replay-iot-realized-the-connected-car-v2" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-10:2375</id>
    <updated>2016-02-09T16:18:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX&lt;br/&gt;Presenters: Phil Berman, Michael Minella &amp;amp; Derrick Shields&lt;br/&gt;Big Data Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/iot-realized-the-connected-car-53122510"&gt;http://www.slideshare.net/SpringCentral/iot-realized-the-connected-car-53122510&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For this session we will explore the power of Spring XD in the context of the Internet of Things (IoT). We will look at a solution developed with Spring XD to stream real time analytics from a moving car using open standards. Ingestion of the real time data (location, speed, engine diagnostics, etc) into HDFS, analyzing it to provide highly accurate MPG and vehicle range prediction, as well as providing real time dashboards will all be covered. Coming out of this session, youâll understand how Spring XD can serve as âLegosÂ®â for the IoT. We&amp;rsquo;ve made some very cool updates to the app (multi-car support, uses Hadoop and Spark, and more). We also are hoping to be running our app on Cloud Foundry by the conference!&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/cejQ46IQpUI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Spring Data REST - Data Meets Hypermedia + Security</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/09/springone2gx-2015-replay-spring-data-rest-data-meets-hypermedia-security" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-09:2374</id>
    <updated>2016-02-09T15:54:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Presenters: Greg Turnquist &amp;amp; Roy Clarkson&lt;br/&gt;Data / Integration Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/spring-data-rest-data-meets-hypermedia-security"&gt;http://www.slideshare.net/SpringCentral/spring-data-rest-data-meets-hypermedia-security&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Check out Spring Data REST, a library than can rapidly bridge your data access layer to a RESTful interface using hypermedia. See how you can build the backend for your startup rapidly using top notch practices. We will then look at Spring-A-Gram, a sample application built with Spring Data REST and secured by Spring Security. Snap pictures from your laptop or smartphone and upload them to the server with little effort.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/s9Cd3-0gYKA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: HTTP/2 for the Web developer</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/09/springone2gx-2015-replay-http-2-for-the-web-developer" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-09:2373</id>
    <updated>2016-02-09T15:51:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015&lt;br/&gt;Presenter: Brian Clozel&lt;br/&gt;Web / Javascript Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/http2-for-the-web-developer"&gt;http://www.slideshare.net/SpringCentral/http2-for-the-web-developer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The HTTP/2 spec is here - clients are servers are racing to implement it, while browser support is increasing everyday&amp;hellip; The JVM world is already working on it in the Servlet 4.0 and JDK9 specs. But we developers, are still trying to understand the implications of it.&lt;/p&gt;
&lt;p&gt;Should we reconsider the way we build JavaScript applications and optimize them for front-end performance? Will our server application have new roles and abilities?&lt;/p&gt;
&lt;p&gt;In this talk we&amp;rsquo;ll look at the main features of HTTP/2 to understand how it will dramatically improve latency on the web. We&amp;rsquo;ll also discuss with concrete examples how HTTP/2 could be integrated in our front-end and Spring Web applications.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/6w3ZwK7mzh0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>Reactive Spring</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/09/reactive-spring" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Rossen Stoyanchev</name>
    </author>
    <id>tag:spring.io,2016-02-08:2371</id>
    <updated>2016-02-09T10:02:00Z</updated>
    <content type="html">&lt;p&gt;At SpringOne2GX 2015, Juergen &lt;a href="http://www.infoq.com/news/2015/09/spring-43-5"&gt;announced plans&lt;/a&gt; for Spring Framework 5 with a major focus on reactive architectures. Concrete efforts are already underway and a lot has happened since!&lt;/p&gt;
&lt;p&gt;At the most basic level, reactive programming models allow for writing non-blocking services and applications. This requires a fundamental shift from writing imperative logic to async, non-blocking, functional-style code, in particular when interacting with external resources.&lt;/p&gt;&lt;h3&gt;&lt;a href="#reactive-web-applications" class="anchor" name="reactive-web-applications"&gt;&lt;/a&gt;Reactive Web Applications&lt;/h3&gt;
&lt;p&gt;Most Java web applications are built on the Servlet API which was originally created with synchronous and blocking semantics. Over the years, support for asynchronous requests (Servlet 3.0) and non-blocking I/O (Servlet 3.1) was added. In Spring MVC, we&amp;rsquo;ve found that it is feasible to add selective async HTTP request handling to existing applications. However, we&amp;rsquo;ve also found that it is very hard to introduce non-blocking I/O within an existing ecosystem of web frameworks and applications. Doing so requires very deep change all the way to the core contracts which need to switch from blocking to async semantics.&lt;/p&gt;
&lt;p&gt;One reason for the continued popularity of Spring MVC is its intuitive, annotation-based programming model based on flexible controller method signatures. Fortunately, the same can continue to serve as a foundation for reactive web applications. This is the direction for the &lt;a href="https://github.com/spring-projects/spring-reactive"&gt;Spring Reactive&lt;/a&gt; effort where you will find a &lt;a href="https://github.com/spring-projects/spring-reactive/blob/545325dbf5d04c30aaedf25b4da1f7b97650d33f/src/test/java/org/springframework/web/reactive/method/annotation/RequestMappingIntegrationTests.java#L464"&gt;TestController&lt;/a&gt; that looks like any Spring MVC controller but runs on a new reactive engine with integration tests against Tomcat, Jetty, Undertow, and Netty. Note that this project will get merged into the Spring Framework master branch shortly after the 4.3 release in May, in preparation for the 5.0 M1 release in June.&lt;/p&gt;&lt;h3&gt;&lt;a href="#reactive-foundation" class="anchor" name="reactive-foundation"&gt;&lt;/a&gt;Reactive Foundation&lt;/h3&gt;
&lt;p&gt;A key ingredient to this effort is the &lt;a href="https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.0/README.md#specification"&gt;Reactive Streams spec&lt;/a&gt; whose purpose is to provide a &lt;em&gt;&amp;ldquo;standard for asynchronous stream processing with non-blocking backpressure&amp;rdquo;&lt;/em&gt;. The spec enables interop among disparate async component providers: from HTTP servers to web frameworks, database drivers, etc. It will be included in JDK 9 as &lt;a href="http://download.java.net/jdk9/docs/api/java/util/concurrent/Flow.html"&gt;java.util.concurrent.Flow&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The spec is small and consists of 4 interfaces, some rules, and a TCK. To expose it as an API however requires infrastructure around it for composing asynchronous logic. Spring Reactive uses &lt;a href="https://github.com/reactor/reactor-core"&gt;Reactor Core&lt;/a&gt;, a small and focused library which serves as a foundation for libraries and frameworks that want to build on Reactive Streams. For those who may be familiar with &lt;a href="http://projectreactor.io/"&gt;Project Reactor&lt;/a&gt;, a lot has happened over the past 6-8 months leading up to this week&amp;rsquo;s release of Reactor Core 2.5 M1, which &lt;a href="https://twitter.com/smaldini"&gt;Stephane Maldini&lt;/a&gt; will provide a full update on soon. &lt;/p&gt;
&lt;p&gt;Stay tuned for further blog posts on reactive programming from different Spring projects. Also, expect some reactive buzz at this year&amp;rsquo;s &lt;a href="http://www.springio.net/"&gt;Spring I/O&lt;/a&gt; conference in beautiful Barcelona!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Orchestrating Work with Activiti and Spring Integration</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/07/orchestrating-work-with-activiti-and-spring-integration" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2016-02-07:2370</id>
    <updated>2016-02-07T00:00:00Z</updated>
    <content type="html">&lt;p&gt;I received an email recently that asked about how to forward control from a wait-state in an Activiti (which is an open-source BPMN2 workflow engine from Alfresco) to a Spring Integration flow and then resume execution of the Activiti workflow process upon completion of some work in Spring Integration.&lt;/p&gt;
&lt;p&gt;To really appreciate why this is useful goal, we need some background.&lt;/p&gt;&lt;h2&gt;&lt;a href="#what-is-activiti" class="anchor" name="what-is-activiti"&gt;&lt;/a&gt;What is Activiti&lt;/h2&gt;
&lt;p&gt;Activiti is a &lt;em&gt;business process engine&lt;/em&gt;. It&amp;rsquo;s basically a directed graph of nodes (states) that model the states of a complex business process. It keeps track of the progression of work described in a business process. It describe automatic- and human-based actors in a system. It also supports interrogating the business process engine to ask questions about the process instances underway: how many of them are there, which ones are stalled, etc. Business Process Management Systems (BPMS) offer many advantages, some of which are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;collaborative processes where humans and services are used to drive towards a larger business requirement (imagine loan approval, legal compliance, document revision, etc)&lt;/li&gt;
  &lt;li&gt;they support auditing and journaling of important business processes in an organization. This is invaluable in regulatory environments.&lt;/li&gt;
  &lt;li&gt;a BPM engine is &lt;em&gt;designed&lt;/em&gt; to handle long running process state, this means your domain model no longer needs to be riddled with process-state specific fields like &lt;code&gt;is_enrolled&lt;/code&gt; or &lt;code&gt;reset_password_date&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;ease-of-modeling complex business processes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This last point merits some focus: a good BPM engine like Activiti supports visually modeling business processes. UML supports visually describing processes using activities (steps) and swimlanes (agents involved in satisfying those steps). UML, of course, is just a modeling tool. It has no runtime semantics. The holy grail of business process management has been to have a modeling notation that could be used by business analysts &lt;em&gt;and&lt;/em&gt; application developers. &lt;a href="https://en.wikipedia.org/wiki/Business_Process_Model_and_Notation"&gt;BPMN 2&lt;/a&gt; is as as close as we&amp;rsquo;ve come towards achieving that goal.&lt;/p&gt;
&lt;p&gt;Here, for example, is a visual model of a &lt;em&gt;very&lt;/em&gt; simple business process.&lt;/p&gt;
&lt;img src="https://raw.githubusercontent.com/joshlong/meh/master/bpmn-model.png" width="500"/&gt;
&lt;p&gt;And here is the standard XML markup that&amp;rsquo;s been created to support that model. This XML has execution semantics, not &lt;em&gt;just&lt;/em&gt; modeling semantics.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&#xD;
&amp;lt;definitions id=&amp;quot;definitions&amp;quot;&#xD;
             xmlns=&amp;quot;http://www.omg.org/spec/BPMN/20100524/MODEL&amp;quot;&#xD;
             xmlns:activiti=&amp;quot;http://activiti.org/bpmn&amp;quot;&#xD;
             typeLanguage=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&#xD;
             expressionLanguage=&amp;quot;http://www.w3.org/1999/XPath&amp;quot;&#xD;
             targetNamespace=&amp;quot;http://www.activiti.org/bpmn2.0&amp;quot;&amp;gt;&#xD;
&#xD;
    &amp;lt;process id=&amp;quot;asyncProcess&amp;quot;&amp;gt;&#xD;
&#xD;
        &amp;lt;startEvent id=&amp;quot;start&amp;quot;/&amp;gt;&#xD;
&#xD;
          &amp;lt;sequenceFlow&#xD;
            id=&amp;quot;flow1&amp;quot;&#xD;
            sourceRef=&amp;quot;start&amp;quot;&#xD;
            targetRef=&amp;quot;sigw&amp;quot;/&amp;gt;&#xD;
&#xD;
        &amp;lt;serviceTask &#xD;
            id=&amp;quot;sigw&amp;quot;&#xD;
           name=&amp;quot;Delegate to Spring Integration&amp;quot;&#xD;
           activiti:delegateExpression=&amp;quot;#{gateway}&amp;quot;/&amp;gt;&#xD;
&#xD;
           &amp;lt;sequenceFlow&#xD;
            id=&amp;quot;scriptFlow&amp;quot;&#xD;
            sourceRef=&amp;quot;sigw&amp;quot;&#xD;
            targetRef=&amp;quot;confirmMovementTask&amp;quot;/&amp;gt;&#xD;
&#xD;
        &amp;lt;scriptTask &#xD;
            id=&amp;quot;confirmMovementTask&amp;quot;&#xD;
            name=&amp;quot;Execute script&amp;quot; scriptFormat=&amp;quot;groovy&amp;quot;&amp;gt;&#xD;
            &amp;lt;script&amp;gt;&#xD;
                println &amp;#39;Moving on..&amp;#39;&#xD;
            &amp;lt;/script&amp;gt;&#xD;
        &amp;lt;/scriptTask&amp;gt;&#xD;
&#xD;
          &amp;lt;sequenceFlow&#xD;
            id=&amp;quot;flow2&amp;quot;&#xD;
            sourceRef=&amp;quot;confirmMovementTask&amp;quot;&#xD;
            targetRef=&amp;quot;theEnd&amp;quot;/&amp;gt;&#xD;
&#xD;
        &amp;lt;endEvent id=&amp;quot;theEnd&amp;quot;/&amp;gt;&#xD;
&#xD;
    &amp;lt;/process&amp;gt;&#xD;
&#xD;
&amp;lt;/definitions&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Most analysts won&amp;rsquo;t write this XML by hand. Instead, they&amp;rsquo;ll use a modeling tool like &lt;a href="https://www.alfresco.com/products/business-process-management"&gt;Alfresco&amp;rsquo;s Activiti Cloud&lt;/a&gt;. The XML artifact, however, is round-trippable: it may be annotated by developers and then revised in the modeling tool.&lt;/p&gt;
&lt;p&gt;On inspection, though, you&amp;rsquo;ll see that most of this isn&amp;rsquo;t very complicated. The process has four states:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;startEvent&lt;/code&gt;&lt;/strong&gt; - where the process starts&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;serviceTask&lt;/code&gt;&lt;/strong&gt; - invoke the Spring bean called &lt;code&gt;gateway&lt;/code&gt; to kick off a bit of processing in Spring Integration (more on this later!)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;scriptTask&lt;/code&gt;&lt;/strong&gt; - print out a simple confirmational message using Groovy&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code&gt;endEvent&lt;/code&gt;&lt;/strong&gt; - done&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The ordering is explicitly spelled out by the various &lt;code&gt;sequenceFlow&lt;/code&gt; elements which connect the nodes.&lt;/p&gt;
&lt;p&gt;Activiti is a great way to keep track of business process state, but it&amp;rsquo;s not a particularly powerful component model or integration technology. For that we need an integration framework like Spring Integration..&lt;/p&gt;&lt;h2&gt;&lt;a href="#what-is-spring-integration" class="anchor" name="what-is-spring-integration"&gt;&lt;/a&gt;What is Spring Integration&lt;/h2&gt;
&lt;p&gt;Spring Integration supports the integration of services and data across multiple otherwise incompatible systems. Conceptually, composing an integration flow is similar to composing a pipes-and-filters flow on a UNIX OS with &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;cat input.txt |  grep ERROR | wc -l &amp;gt; output.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the example, we take data from a source (the file &lt;code&gt;input.txt&lt;/code&gt;), pipe it to the &lt;code&gt;grep&lt;/code&gt; command to filter the results and keep only the lines that contain the token &lt;code&gt;ERROR&lt;/code&gt;, and then pipe it to the &lt;code&gt;wc&lt;/code&gt; utility which we to count how many lines there are. Finally, the final count is written to an output file, &lt;code&gt;output.txt&lt;/code&gt;. These components - &lt;code&gt;cat&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, and &lt;code&gt;wc&lt;/code&gt; - know nothing of each other. They were not designed with each other in mind. Instead, they know only how to read from &lt;code&gt;stdin&lt;/code&gt; and write to &lt;code&gt;stdout&lt;/code&gt;. This normalization of data makes it very easy to compose complex solutions from simple atoms. In the example, the act of &lt;code&gt;cat&lt;/code&gt;ing a file turns data into data that any process aware of &lt;code&gt;stdin&lt;/code&gt; can read. It &lt;em&gt;adapts&lt;/em&gt; the inbound data into the normalized format, lines of strings. At the end, the redirect (&lt;code&gt;&amp;gt;&lt;/code&gt;) operator turns the normalized data, lines of strings, into data on the file system. It &lt;em&gt;adapts&lt;/em&gt; it. The pipe (&lt;code&gt;|&lt;/code&gt;) character is used to signal that the output of one component should flow to the input of another.&lt;/p&gt;
&lt;p&gt;A Spring Integration flow works the same way: data is normalized into &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt; instances. Each &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt; has a payload and headers - metadata about the payload in a &lt;code&gt;Map&amp;lt;K,V&amp;gt;&lt;/code&gt; - that are the input and output of different messaging components. These messaging components are typically provided by Spring Integration, but it&amp;rsquo;s easy to write and use your own. There are all manner of messaging components supporting all of the &lt;a href="http://www.enterpriseintegrationpatterns.com/"&gt;the Enterprise Application Integration patterns&lt;/a&gt; (filters, routers, transformers, adapters, gateways, etc.). The Spring framework &lt;code&gt;MessageChannel&lt;/code&gt; is a named conduit through which &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt;s flow between messaging components. They&amp;rsquo;re pipes and, by default, they work sort of like a &lt;code&gt;java.util.Queue&lt;/code&gt;. Data in, data out.&lt;/p&gt;
&lt;p&gt;Spring Integration inbound adapters &lt;em&gt;adapt&lt;/em&gt; data from external systems (message queues like RabbitMQ, Apache Kafka, and JMS, email, Twitter, file system mounts, IoT-devices, and a zillion other systems) into &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt;s. Spring Integration outbound adapters do the same, in reverse, taking &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt;s and writing them to an external system (for example, as an e-mail, or a Tweet, or an Apache Kafka message).&lt;/p&gt;
&lt;p&gt;Spring Integration supports &lt;em&gt;event-driven architectures&lt;/em&gt; because it can help detect and then respond to events in the external world. For example, you can use Spring Integration to poll a filesystem every 10 seconds and publish a &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt; whenever a new file appears. You can use Spring Integration to act as a listener to messages delivered to a Apache Kafka topic. The adapter handles responding to the external event and frees you from worrying too much about originating the message and lets you focus on handling the message once it arrives. It&amp;rsquo;s the integration equivalent of dependency injection! &lt;/p&gt;
&lt;p&gt;Dependency injection leaves component code free of worries about resource initialization and acquisition and leaves it free to focus on writing code with those dependencies. Where did the &lt;code&gt;javax.sql.DataSource&lt;/code&gt; field come from? Who cares! Spring wired it in, and it may have gotten it from a Mock in a test, from JNDI in a classic application server, or from a configured Spring Boot bean. Component code remains ignorant of those details. ~15 years ago, when we first started talking about dependency injection, we would talk about the &amp;ldquo;Hollywood principal:&amp;rdquo; &amp;ldquo;don&amp;rsquo;t call me, I&amp;rsquo;ll call you!&amp;rdquo; This applies even more to Spring Integration!&lt;/p&gt;
&lt;p&gt;Inbound gateways take incoming requests from external systems, process them as &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt;s, and send a reply. Outbound gateways take &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt;s, forward them to an external system, and await the response from that system. They support request and reply interactions.&lt;/p&gt;&lt;h2&gt;&lt;a href="#an-activiti-and-spring-integration-gateway" class="anchor" name="an-activiti-and-spring-integration-gateway"&gt;&lt;/a&gt;An Activiti and Spring Integration Gateway&lt;/h2&gt;
&lt;p&gt;Activiti can be used to describe a complex, long-running process in terms of recorded, auditable, and predictable states, and Spring Integration can be used to, well, &lt;em&gt;integrate&lt;/em&gt;! Spring Integration is where we keep the interesting Java code, and Activiti keeps track of the overarching state. This trick was useful 20 years ago and it&amp;rsquo;s useful today in the massively distributed world of microservices, too, where processing for a single request may span multiple services and nodes. It&amp;rsquo;s convenient, then, &lt;a href="https://spring.io/blog/2015/03/08/getting-started-with-activiti-and-spring-boot"&gt;that Spring Boot, Spring Integration and Activiti work so well together&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;One common use case is to initiate a BPM process with Activiti and then, on entering a wait-state, delegate handling of that state to Spring Integration which can, of course, spread the work to other systems. Here&amp;rsquo;s a simple diagram illustrating the flow.&lt;/p&gt;
&lt;img src="https://raw.githubusercontent.com/joshlong/meh/master/activiti-and-si-interaction.jpg" width="500"/&gt;
&lt;p&gt;BPM process states can often involve human agents. For example, a workflow engine may have a state where a document is sent to a human for approval, but the reviewer is on vacation and won&amp;rsquo;t be back for weeks. It would be wasteful, not to mention dangerous, to keep a thread open with the expectation that whatever confirmation is needed to continue processing will come back within milliseconds or seconds.&lt;/p&gt;
&lt;p&gt;Activiti is smart enough to pause execution, persist execution state to a database during a wait-state, and only resume upon having the process execution &lt;em&gt;signaled&lt;/em&gt;. Signalling the process engine rehydrates the process and resumes execution. A simple example might be a new user enrollment business process that delegates to Spring Integration to send an email with a sign up confirmation link. It may take days for the user to click the confirmation link, but on clicking, the system should proceed with the enrollment business process.&lt;/p&gt;
&lt;p&gt;In this post we&amp;rsquo;re going to look at how to initiate a BPM process that enters a wait-state and then delegates to Spring Integration to do some kind of custom processing and then, in the far flung future, resumes execution of the process.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll setup two Spring Integration flows: one to handle requests from Activiti into Spring Integration and another that handles eventual replies and triggers the resumption of the process.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll need something to kick off our process, so here&amp;rsquo;s a simple REST endpoint (&lt;code&gt;http://localhost:8080/start&lt;/code&gt;) that launches a new process each time:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@RestController&#xD;
class ProcessStartingRestController {&#xD;
&#xD;
 @Autowired&#xD;
 private ProcessEngine processEngine;&#xD;
&#xD;
 @RequestMapping(method = RequestMethod.GET, value = &amp;quot;/start&amp;quot;)&#xD;
 Map&amp;lt;String, String&amp;gt; launch() {&#xD;
  ProcessInstance asyncProcess = this.processEngine.getRuntimeService()&#xD;
    .startProcessInstanceByKey(&amp;quot;asyncProcess&amp;quot;);&#xD;
  return Collections.singletonMap(&amp;quot;executionId&amp;quot;, asyncProcess.getId());&#xD;
 }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Messages will flow across two &lt;code&gt;MesssageChannel&lt;/code&gt;s that we&amp;rsquo;ll create in a &lt;code&gt;@Configuration&lt;/code&gt; class: &lt;code&gt;requests&lt;/code&gt; and &lt;code&gt;replies&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Configuration&#xD;
class MessageChannels {&#xD;
&#xD;
 @Bean&#xD;
 DirectChannel requests() {&#xD;
  return new DirectChannel();&#xD;
 }&#xD;
&#xD;
 @Bean&#xD;
 DirectChannel replies() {&#xD;
  return new DirectChannel();&#xD;
 }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The nice thing about using a &lt;code&gt;@Configuration&lt;/code&gt; class is that it is itself a Spring component and can be injected anywhere. We can dereference the channels by invoking the &lt;code&gt;@Bean&lt;/code&gt; provider methods directly. The alternative is to use &lt;code&gt;@Qualifier&lt;/code&gt; everytime we inject a reference to one of the channels, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;&lt;br/&gt;public static final String REPLIES_CHANNEL_NAME = &amp;quot;replies&amp;quot;;&#xD;
&#xD;
@Autowired&#xD;
@Qualifier(REPLIES_CHANNEL_NAME)&#xD;
private MessageChannel replies;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our BPMN is pretty straightforward, but we&amp;rsquo;ll use an Activiti-specific namespace attribute, &lt;code&gt;activiti:delegateExpression=&amp;quot;#{gateway}&amp;quot;&lt;/code&gt;, to tell Activiti to call a bean named &lt;code&gt;gateway&lt;/code&gt; that&amp;rsquo;s registered in Spring. Activiti knows to do this because this application uses the Activiti auto-configuration for Spring Boot which, among many other things, exposes Spring-managed beans to the Activiti expression-language. The &lt;code&gt;gateway&lt;/code&gt; is an Activiti-based bean of type &lt;code&gt;ReceiveTaskActivityBehavior&lt;/code&gt;. Spring Boot has auto-configurations for both Spring Integration and Activiti so 90% of the tedious setup goes out the window.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at our simple &lt;code&gt;gateway&lt;/code&gt; component, an implementation of Activiti&amp;rsquo;s &lt;code&gt;ActivityBehavior&lt;/code&gt; interface that acts as a callback where we can send a &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt; into the &lt;code&gt;requests&lt;/code&gt; channel and kick off our Spring Integration flow. The important thing here is that we&amp;rsquo;ve captured the &lt;code&gt;executionId&lt;/code&gt; which we&amp;rsquo;ll need later to &lt;em&gt;resume&lt;/em&gt; or &lt;em&gt;signal&lt;/em&gt; the process.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Bean&#xD;
ActivityBehavior gateway(MessageChannels channels) {&#xD;
  return new ReceiveTaskActivityBehavior() {&#xD;
&#xD;
    @Override&#xD;
    public void execute(ActivityExecution execution) throws Exception {&#xD;
&#xD;
      Message&amp;lt;?&amp;gt; executionMessage = MessageBuilder&#xD;
          .withPayload(execution)&#xD;
          .setHeader(&amp;quot;executionId&amp;quot;, execution.getId())&#xD;
          .build();&#xD;
&#xD;
      channels.requests().send(executionMessage);&#xD;
    }&#xD;
  };&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt; will pop out the other side of the &lt;code&gt;requests&lt;/code&gt; &lt;code&gt;MessageChannel&lt;/code&gt; and something needs to process it. In a sophisticated example, it&amp;rsquo;d be trivial to transform the request into a meaningful message and then, for example, forward it to some other system like e-mail. Here, we just print out the headers so that we can note the &lt;code&gt;executionId&lt;/code&gt; and use that later.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Bean&#xD;
IntegrationFlow requestsFlow(MessageChannels channels) {&#xD;
 return IntegrationFlows.from(channels.requests())&#xD;
   .handle(msg -&amp;gt; msg.getHeaders().entrySet()&#xD;
     .forEach(e -&amp;gt; log.info(e.getKey() + &amp;#39;=&amp;#39; + e.getValue())))&#xD;
   .get();&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, the workflow definition will have been persisted and there is no active process instance. We need to signal it, somehow, asynchronously. We&amp;rsquo;ll do so using a REST endpoint, &lt;code&gt;http://localhost:8080/resume/{executionId}&lt;/code&gt;. REST is easy to grok, but really we could&amp;rsquo;ve used any event from any external system that Spring Integration knows about to achieve this effect. The only thing to ensure is that, whatever the external event, we&amp;rsquo;re somehow able to send the &lt;code&gt;executionId&lt;/code&gt; along, as we do here by capturing it in the URI.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;&lt;br/&gt;@RestController&#xD;
class ProcessResumingRestController {&#xD;
&#xD;
 @Autowired&#xD;
 private MessageChannels messageChannels;&#xD;
&#xD;
 @RequestMapping(method = RequestMethod.GET, value = &amp;quot;/resume/{executionId}&amp;quot;)&#xD;
 void resume(@PathVariable String executionId) {&#xD;
&#xD;
  Message&amp;lt;String&amp;gt; build = MessageBuilder.withPayload(executionId)&#xD;
    .setHeader(&amp;quot;executionId&amp;quot;, executionId)&#xD;
    .build();&#xD;
&#xD;
  this.messageChannels.replies().send(build);&#xD;
 }&#xD;
}&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt; flows through the &lt;code&gt;replies&lt;/code&gt; &lt;code&gt;MessageChannel&lt;/code&gt;, it&amp;rsquo;ll pop out the other end and, again, something needs to process it. Here, we&amp;rsquo;ll use another Spring Integration flow that takes the incoming &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt; and signals the resumption of the process. Once this flow is executed, you&amp;rsquo;ll see the next step in the process, the &lt;code&gt;scriptTask&lt;/code&gt;, evaluated and the words &amp;ldquo;Moving on!&amp;rdquo; printed to the console.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Bean&#xD;
IntegrationFlow repliesFlow(MessageChannels channels,&#xD;
       ProcessEngine engine) {&#xD;
 return IntegrationFlows.from(channels.replies())&#xD;
   .handle(msg -&amp;gt; engine.getRuntimeService().signal(&#xD;
     String.class.cast(msg.getHeaders().get(&amp;quot;executionId&amp;quot;))))&#xD;
   .get();&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#next-steps" class="anchor" name="next-steps"&gt;&lt;/a&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve covered a lot! We&amp;rsquo;re involving &lt;em&gt;both&lt;/em&gt; a BPM engine and an integration framework to handle processing, and I appreciate that the correct use of the intersection of the two is kind of a niche topic. The goal in this post was to effectively use both, where applicable, to the fullest. BPM adds a fair amount of &lt;a href="https://en.wikipedia.org/wiki/Cognitive_load"&gt;&lt;em&gt;cognitive load&lt;/em&gt;&lt;/a&gt; for simple integrations but offers a &lt;em&gt;lot&lt;/em&gt; of value when business process descriptions must be model- and business analyst-friendly. One common misconception is that developers have to give up the ability to enhance the system once BPM is involved; NOT SO! Thanks to Spring Boot and some hard work from the Activiti team, Activiti works perfectly with all of Spring.&lt;/p&gt;
&lt;p&gt;The real power is using BPM to orchestrate complex processing logic: imagine hitting a state in a BPM process and then invoking a Spring Batch job, or calling a REST service with a Ribbon load-balanced &lt;code&gt;RestTemplate&lt;/code&gt; in Spring Cloud, or forwarding the &lt;code&gt;Message&amp;lt;T&amp;gt;&lt;/code&gt; into a Spring Cloud Data Flow stream process. Spring Cloud Data Flow is one of my favorite approaches to data processing because it builds on Spring Cloud Stream which in turn builds on Spring Integration: it&amp;rsquo;s &lt;code&gt;MessageChannel&lt;/code&gt;s all the way down!&lt;/p&gt;
&lt;p&gt;The code for &lt;a href="https://github.com/joshlong/activiti-examples/tree/master/async-activiti-integration"&gt;the example is online&lt;/a&gt;. &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Stream 1.0.0.M4 is now available</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/06/spring-cloud-stream-1-0-0-m4-is-now-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Marius Bogoevici</name>
    </author>
    <id>tag:spring.io,2016-02-04:2369</id>
    <updated>2016-02-06T00:07:58Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team, I am pleased to announce the release of &lt;a href="http://cloud.spring.io/spring-cloud-stream/"&gt;Spring Cloud Stream 1.0.0.M4&lt;/a&gt;. The new release comes with a few major changes and enhancements, and it defines core abstractions and primitives that we believe to be essential for the development of distributed real-time data processing applications. To name some of them:&lt;/p&gt;&lt;h4&gt;&lt;a href="#default-publish-subscribe-semantics" class="anchor" name="default-publish-subscribe-semantics"&gt;&lt;/a&gt;Default publish-subscribe semantics&lt;/h4&gt;
&lt;p&gt;The most important change in Spring Cloud Stream 1.0.0.M4 is the way in which applications interact with each other. We have opted for a default publish-subscribe model, in which each application that receives messages from a given destination will receive a copy of the message. This is a better fit for the processing model of stream applications, where intermediate topics act as data hubs for the various intersecting data streams, also making scenarios such as tapping easier and more efficient. This feature goes hand in hand with the next, which is &lt;a href="http://docs.spring.io/spring-cloud-stream/docs/1.0.0.M4/reference/htmlsingle/index.html#_consumer_group_support"&gt;consumer groups&lt;/a&gt;.&lt;/p&gt;&lt;h4&gt;&lt;a href="#consumer-groups-for-load-balancing-and-partitioning" class="anchor" name="consumer-groups-for-load-balancing-and-partitioning"&gt;&lt;/a&gt;Consumer groups for load balancing and partitioning&lt;/h4&gt;
&lt;p&gt;Of course, if there are multiple instances of a given application, we want them to act as competing or partitioned consumers - messages should be sent to one and only one of the instances that run in parallel. This can be done now in Spring Cloud Stream 1.0.0.M4 by the use of &lt;a href="http://docs.spring.io/spring-cloud-stream/docs/1.0.0.M4/reference/htmlsingle/index.html#_consumer_group_support"&gt;consumer groups&lt;/a&gt;. Input bindings may specify a consumer group at runtime, e.g. &lt;code&gt;spring.cloud.stream.bindings.input.group=myGroup&lt;/code&gt;. If multiple applications do so, they become part of the same group and messages will be distributed between them, either via a load-balancing or a partitioning strategy (controlled by a different set of configuration). This concept has been inspired by Kafka, but different binder implementations have different &lt;a href="http://docs.spring.io/spring-cloud-stream/docs/1.0.0.M4/reference/htmlsingle/index.html#_binder_spi"&gt;approaches&lt;/a&gt; to providing this feature, and this is a first class concept in the framework. &lt;/p&gt;&lt;h4&gt;&lt;a href="#binder-spi-simplifications" class="anchor" name="binder-spi-simplifications"&gt;&lt;/a&gt;Binder SPI simplifications&lt;/h4&gt;
&lt;p&gt;While not exposed to the general user, the Binder SPI is an important part of Spring Cloud Stream, and ensures that the framework remains flexible and extensible. In this release, we have taken radical steps of &lt;a href="https://github.com/spring-cloud/spring-cloud-stream/blob/master/spring-cloud-stream/src/main/java/org/springframework/cloud/stream/binder/Binder.java"&gt;simplifying&lt;/a&gt; the SPI, making it easier for developers to create their own implementations, if necessary, besides the already provided Kafka, Rabbit and Redis. (As a fair warning, we are planning a few more changes to the Binder SPI, before the RC release). &lt;/p&gt;&lt;h4&gt;&lt;a href="#kafka-binder-offset-resetting-and-start-offset-control" class="anchor" name="kafka-binder-offset-resetting-and-start-offset-control"&gt;&lt;/a&gt;Kafka binder offset resetting and start offset control&lt;/h4&gt;
&lt;p&gt;The Kafka binder now supports resetting offsets at start via the &lt;code&gt;spring.cloud.stream.binder.kafka.resetOffsets&lt;/code&gt; property, allowing an application to resume consumption from either the beginning or the end of the partitions it subscribes to, via the &lt;code&gt;spring.cloud.stream.binder.kafka.startOffset&lt;/code&gt; property which can be set either to &lt;code&gt;earliest&lt;/code&gt; or &lt;code&gt;latest&lt;/code&gt; offset. The latter can be used for controlling the starting offset of a newly launched application.&lt;/p&gt;&lt;h4&gt;&lt;a href="#health-indicator-support" class="anchor" name="health-indicator-support"&gt;&lt;/a&gt;Health indicator support&lt;/h4&gt;
&lt;p&gt;Spring Cloud Stream now takes advantage of the Spring Boot&amp;rsquo;s application health management support, by exposing a &lt;a href="http://docs.spring.io/spring-cloud-stream/docs/1.0.0.M4/reference/htmlsingle/index.html#_health_indicator"&gt;health indicator&lt;/a&gt; for the binders, reflecting the status of the middleware connection. This feature is currently supported for Rabbit and Redis, and is particularly important if the binders use a different connection than the default one provided by Boot. &lt;/p&gt;
&lt;p&gt;The whole list of enhancements and fixes can be viewed in &lt;a href="https://github.com/spring-cloud/spring-cloud-stream/issues?q=milestone%3A1.0.0.M4+is%3Aclosed"&gt;GitHub&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://cloud.spring.io/spring-cloud-stream"&gt;Spring Cloud Stream&lt;/a&gt; is a core component of &lt;a href="http://cloud.spring.io/spring-cloud-dataflow/"&gt;Spring Cloud Data Flow&lt;/a&gt; along with &lt;a href="http://cloud.spring.io/spring-cloud-task/"&gt;Spring Cloud Task&lt;/a&gt;, and provides the foundation for &lt;a href="http://cloud.spring.io/spring-cloud-bus/"&gt;Spring Cloud Bus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And, as always, we welcome feedback: either in &lt;a href="https://github.com/spring-cloud/spring-cloud-stream"&gt;GitHub&lt;/a&gt;, on &lt;a href="http://stackoverflow.com/questions/tagged/spring-cloud"&gt;Stack Overflow&lt;/a&gt;, or on &lt;a href="https://twitter.com/springcentral"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - February 2nd, 2016</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/02/this-week-in-spring-february-2nd-2016" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2016-02-02:2363</id>
    <updated>2016-02-02T13:34:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This week I&amp;rsquo;m off to the &lt;a href="http://microxchg.io/2016/index.html"&gt;Microxchg&lt;/a&gt; conference in Berlin, Germany, to generally bring the Spring and talk about microservices. Then, it&amp;rsquo;s off to Stockholm, Sweden for &lt;a href="http://www.jfokus.se/jfokus/"&gt;JFokus&lt;/a&gt;! As usual, if you&amp;rsquo;re in either of those places, &lt;a href="http://twitter.com/starbuxman"&gt;hit me up&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;This week we&amp;rsquo;ve got a lot to cover so let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Batch lead Michael Minella has just announced a new project, &lt;a href="http://spring.io/blog/2016/01/27/introducing-spring-cloud-task"&gt;Spring Cloud Task&lt;/a&gt;. Spring Cloud Task provides the ability to run, manage and distribute ad-hoc tasks in the same way you can run batch &lt;code&gt;Job&lt;/code&gt;s with Spring Batch. There are some exciting integrations possible with Spring StateMachine and Spring Cloud Dataflow, so read this post and stay tuned!&lt;/li&gt;
  &lt;li&gt;you might enjoy this German-language JAXenter &lt;a href="https://jaxenter.de/spring-cloud-task-kurzlebige-microservices-33925"&gt;post on Spring Cloud Task&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Security lead Rob Winch has a nice post on security with Angular.js titled, &lt;a href="http://spring.io/blog/2016/01/28/angularjs-escaping-the-expression-sandbox-for-xss"&gt;&lt;em&gt;Angular.js: Escaping the Expression Sandbox for XSS&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Integration committer (and, yes, ninja) and &lt;a href="http://spring.io/blog/2016/01/28/java-dsl-for-spring-integration-1-1-2-is-available-now"&gt;Spring Integration Java Config DSL lead Artem Bilan has just announced Spring Integration 1.1.2&lt;/a&gt; which includes updates and bug fixes.&lt;/li&gt;
  &lt;li&gt;Spring IO Platform lead Andy Wilkinson&amp;rsquo;s just &lt;a href="http://spring.io/blog/2016/02/01/spring-io-platform-2-0-2-release"&gt;released Spring IO Platform 2.0.2&lt;/a&gt; which adds the latest maintenance releases for several projects&lt;/li&gt;
  &lt;li&gt;SpringOne2GX 2015 replay: &lt;a href="https://spring.io/blog/2016/02/02/springone2gx-2015-replay-implementing-a-highly-scalable-stock-prediction-system-with-r-apache-geode-and-spring-xd"&gt;Implementing a Highly Scalable Stock Prediction System with R, Apache Geode and Spring XD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SpringOne2GX 2015 replay: &lt;a href="https://spring.io/blog/2016/02/02/springone2gx-2015-replay-spring-boot-is-made-for-tooling"&gt;Spring Boot is made for tooling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SpringOne2GX 2015 replay: &lt;a href="https://spring.io/blog/2016/02/02/springone2gx-2015-replay-building-highly-scalable-spring-applications-with-in-memory-distributed-data"&gt;Building Highly-Scalable Spring Applications with In-Memory, Distributed Data&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;SpringOne2GX 2015 replay: &lt;a href="https://spring.io/blog/2016/02/02/springone2gx-2015-replay-introduction-to-reactive-programming"&gt;Introduction to Reactive Programming&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I really enjoyed &lt;a href="http://yetanotherdevblog.com/introduction_to_spring_restdocs"&gt;Stathis Souris&amp;rsquo;s post on using Spring REST Docs&lt;/a&gt;: it&amp;rsquo;s thorough, progresses linearly and nicely, and it&amp;rsquo;s up-to-date. Well done!&lt;/li&gt;
  &lt;li&gt;our pal Biju Kunjummen&amp;rsquo;s put together a nice post &lt;a href="http://www.javacodegeeks.com/2016/02/spring-cloud-ribbon-making-secured-call.html"&gt;on using Spring Cloud Ribbon to make secured calls to another service&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;our pal Petri Kainulainen is back at it again, this time with the &lt;a href="http://www.petrikainulainen.net/programming/spring-framework/spring-batch-tutorial-getting-the-required-dependencies-with-maven/"&gt;second installment of his series on Spring Batch&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;if you &lt;em&gt;must&lt;/em&gt; stand up a new application today without Spring Boot, then you might look at &lt;a href="http://blog.codeleak.pl/2016/01/spring-mvc-4-quickstart-maven-archetype.html"&gt;RafaÅ Borowiec&lt;/a&gt;&amp;rsquo;s Maven archetype. But, (_gulp_!) please don&amp;rsquo;t stand up a new application without Spring Boot!&lt;/li&gt;
  &lt;li&gt;I loved this forum post on the good &amp;rsquo;ol JavaRanch in which our very own Craig Walls, lead of Spring Social and author of the recently released and epic &lt;em&gt;Spring Boot in Action&lt;/em&gt;, answers the question: &lt;a href="http://www.coderanch.com/t/661254/Spring/Spring-Boot-Spring-Projects"&gt;How does Spring Boot relate to other Spring projects&lt;/a&gt;? Check it out!&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Implementing a Highly Scalable Stock Prediction System with R, Apache Geode and Spring XD</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/02/springone2gx-2015-replay-implementing-a-highly-scalable-stock-prediction-system-with-r-apache-geode-and-spring-xd" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-02:2366</id>
    <updated>2016-02-02T13:33:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;br/&gt;Presenters: Fred Melo &amp;amp; William Markito Oliveira&lt;br/&gt;Big Data Track&lt;br/&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/implementing-a-highly-scalable-stock-prediction-system-with-r-apache-geode-and-spring-xd"&gt;http://www.slideshare.net/SpringCentral/implementing-a-highly-scalable-stock-prediction-system-with-r-apache-geode-and-spring-xd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finance market prediction has always been one of the hottest topics in Data Science and Machine Learning. However, the prediction algorithm is just a small piece of the puzzle. Building a data stream pipeline that is constantly combining the latest price info with high volume historical data is extremely challenging using traditional platforms, requiring a lot of code and thinking about how to scale or move into the cloud. This session is going to walk-through the architecture and implementation details of an application built on top of open-source tools that demonstrate how to easily build a stock prediction solution with no source code - except a few lines of R and the web interface that will consume data through a RESTful endpoint, real-time. The solution leverages in-memory data grid technology for high-speed ingestion, combining streaming of real-time data and distributed processing for stock indicator algorithms.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/0btWBAWnz20" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2015 replay: Spring Boot is made for tooling</title>
    <link rel="alternate" href="https://spring.io/blog/2016/02/02/springone2gx-2015-replay-spring-boot-is-made-for-tooling" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2016-02-02:2367</id>
    <updated>2016-02-02T13:33:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2015.&lt;br/&gt;Presenters:Yann CÃ©bron - JetBrains, StÃ©phane Nicoll, Pivotal&lt;br/&gt;Core Spring Track&lt;br/&gt;Slides: no slides all demo&lt;/p&gt;
&lt;p&gt;For many years, IntelliJ IDEA has been widely used in projects employing the Spring Framework. The latest version of the IDE (14.1) now ships with dedicated Spring Boot support. In this practical presentation we&amp;rsquo;re going to look at some features from IntelliJ IDEA that will help you not only get started with Spring Boot but also guide you along the way, helping with coding and configuration management for your application. As a bonus, we&amp;rsquo;ll also discover some nice hidden tips and tricks you might not know yet. This talk is all about being more efficient when writing code.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/IHZ0d3MBb0g" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content>
  </entry>
</feed>
